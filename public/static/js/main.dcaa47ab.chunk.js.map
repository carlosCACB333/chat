{"version":3,"sources":["variables/iconos.js","helpers/axios.js","contexts/AuthContext.js","components/forms/UserAvatar.js","helpers/avatarUrl.js","variables/types.js","actions/chat.js","components/chat/SidebarMenu.js","components/forms/InputText.js","components/forms/InputPassword.js","validators/validator.js","components/auth/Login.js","components/forms/InputSelect.js","components/auth/Signup.js","pages/AuthPage.js","helpers/dateFormat.js","components/chat/Chat.js","components/chat/ChatContainer.js","helpers/scroll.js","hooks/useSocket.js","contexts/SocketContext.js","components/chat/ControlChat.js","components/chat/NavbarChat.js","components/chat/MainChat.js","components/chat/ChatItem.js","components/chat/UsersActive.js","components/home/UserItem.js","components/chat/Search.js","components/chat/SidebarChat.js","pages/ChatPage.js","components/home/TopBar.js","components/home/SideBar.js","components/home/NewPost.js","components/home/MainPosts.js","components/users/UserCard.js","components/home/RightBar.js","pages/HomePage.js","components/others/NotFound.js","utils/Loading.js","pages/ProfilePage.js","routers/AppRouter.js","reducers/chatReducer.js","reducers/rootReducer.js","store/store.js","App.js","index.js"],"names":["library","add","faCode","faCommentDots","faHighlighter","faMoon","faLightbulb","faPaperPlane","faClock","faUser","faHome","faUserCheck","Token","localStorage","getItem","axs","axios","create","baseURL","defaults","headers","common","interceptors","response","use","error","status","removeItem","Promise","reject","AuthContext","createContext","initial","token","user","cheking","AuthProvider","children","useState","auth","setAuth","checkToken","useCallback","method","url","then","res","data","setItem","catch","err","console","log","Provider","value","UserAvatar","size","src","online","rest","alt","mx","pos","border","_after","content","w","h","bg","rounded","bottom","right","getAvatar","email","trim","toLowerCase","hash","md5","types","startChatActivate","type","payload","startLoadMessage","messages","SidebarMenu","useContext","useColorMode","colorMode","toggleColorMode","dispatch","useDispatch","direction","align","justify","label","placement","to","icon","onClick","as","IconButton","picture","zIndex","p","textAlign","spacing","mb","fontSize","fontWeight","fontFamily","username","color","command","viewBox","fill","d","InputText","errors","touched","isRequired","help","rests","isInvalid","Array","map","key","InputPassword","show","setShow","checked","onChange","e","target","loginValidator","yup","shape","required","password","singupValidator","min","password2","oneOf","firstName","lastName","gender","Login","formik","useFormik","initialValues","remember","onSubmit","setErrors","validationSchema","mt","handleSubmit","variant","placeholder","_focus","useColorModeValue","autoComplete","getFieldProps","display","alignItems","htmlFor","defaultChecked","bgGradient","_hover","boxShadow","disabled","isValid","shadow","outline","InputSelect","options","name","Signup","base","lg","Object","keys","length","AuthPage","path","useLocation","pathname","Flex","maxW","minH","justifyContent","flexDir","md","flex","m","moment","locale","dateFormat","date","format","Chat","me","message","bgChat","ms","my","from","borderLeftColor","borderTopColor","borderRightColor","borderBlockColor","left","createdAt","ChatContainer","useSelector","state","chat","className","id","_id","scrollBottom","containerId","duration","animateScroll","scrollToBottom","useSocket","serverPath","socket","setSocket","setOnline","connectSocket","socketTem","io","connect","transports","forceNew","query","disconnectSocket","disconnect","useEffect","connected","on","users","startListUsers","startSendMessage","startChatTyping","startNotChatTyping","SocketContext","SocketProvider","process","ControlChat","setmessage","userSelected","preventDefault","emit","onFocus","onBlur","NavbarChat","py","whiteSpace","overflow","textOverflow","lastLogin","MainChat","ChatItem","active","useMediaQuery","isLg","px","backgroundColor","cursor","sendMe","startOf","fromNow","typing","UsersActive","UserItem","usr","bgActive","bgBtn","setUser","navigate","useNavigate","toFollow","prev","avatar","followers","some","foll","transform","LinkRoute","Search","setUsers","handleChange","a","keyword","position","SidebarChat","chats","bgSidebar","useBreakpointValue","templateColumns","filter","ChatNoSelected","sm","lineHeight","bgClip","ChatPage","isMd","TopBar","xl","BellIcon","SideBar","u","NewPost","setPosts","file","setFile","setContent","setType","fileRef","useRef","files","ref","accept","objectFit","URL","createObjectURL","leftIcon","current","click","closeOnSelect","defaultValue","title","FormData","append","Post","pst","post","setPost","handleLike","onDoubleClick","boxSize","likes","LikesModal","useDisclosure","isOpen","onOpen","onClose","MainPosts","posts","UserCard","following","RightBar","Math","random","HomePage","g","NotFound","backgroundClip","colorScheme","LoadingUser","noOfLines","Loading","gap","height","TableUser","isNumeric","ProfilePage","btnOption","setBtnOption","bgProfile","bgCard","useParams","loading","setLoading","bgImage","borderRadius","bgPosition","bgRepeat","backgroundSize","backdropFilter","borderColor","maxWidth","colSpan","HomeLayout","bgMenu","Private","Public","AppRouter","element","index","initialState","rootReducer","combineReducers","action","ch","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","styles","global","props","body","mode","wordWrap","theme","extendTheme","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcaa47ab.chunk.js","sourcesContent":["import {\r\n    faCode,\r\n    faCommentDots,\r\n    faHighlighter,\r\n    faMoon,\r\n    faLightbulb,\r\n    faPaperPlane,\r\n    faClock,\r\n    faUser,\r\n    faHome,\r\n    faUserCheck,\r\n    // faUserGroup,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nlibrary.add(\r\n    faCode,\r\n    faCommentDots,\r\n    faHighlighter,\r\n    faMoon,\r\n    faLightbulb,\r\n    faPaperPlane,\r\n    faClock, faUser,\r\n    faHome,\r\n    faUserCheck,\r\n    // faUserGroup,\r\n);","import axios from 'axios';\r\nconst Token = localStorage.getItem('token');\r\nconst baseURL = process.env.REACT_APP_API_URL + '/api/'\r\nconst axs = axios.create({ baseURL })\r\naxs.defaults.headers.common['Authorization'] = Token\r\n\r\naxs.interceptors.response.use(response => response, error => {\r\n\r\n    if (error.response.status === 401) {\r\n        localStorage.removeItem('token')\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default axs;","\r\nimport React, { createContext, useCallback, useState } from \"react\"\r\nimport axs from \"../helpers/axios\"\r\n\r\nexport const AuthContext = createContext()\r\nconst initial = {\r\n    token: null,\r\n    user: null,\r\n    cheking: true\r\n}\r\n\r\nconst AuthProvider = ({ children }) => {\r\n\r\n    const [auth, setAuth] = useState(initial)\r\n\r\n\r\n    const checkToken = useCallback(() => {\r\n        setAuth({ ...initial, cheking: true })\r\n        axs({\r\n            method: \"POST\",\r\n            url: \"auth/renew\",\r\n        }).then(res => {\r\n            const { user, token, } = res.data\r\n            localStorage.setItem('token', token)\r\n            setAuth({ user, token, cheking: false })\r\n        }).catch(err => {\r\n            console.log(err.response);\r\n            localStorage.removeItem('token');\r\n            setAuth({ ...initial, cheking: false })\r\n        })\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ auth, setAuth, checkToken }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthProvider\r\n","import { Avatar } from '@chakra-ui/avatar'\r\nimport React from 'react'\r\n\r\nconst UserAvatar = ({ size = 'md', src, online = true, ...rest }) => {\r\n    return (\r\n        <Avatar\r\n            {...rest}\r\n            size={size}\r\n            src={src}\r\n            alt={'avatar'}\r\n            mx={2}\r\n            pos={'relative'}\r\n            border='2px solid white'\r\n            _after={{\r\n                content: '\"\"',\r\n                w: 4,\r\n                h: 4,\r\n                bg: online ? 'green.300' : 'red.300',\r\n                border: '2px solid white',\r\n                rounded: 'full',\r\n                pos: 'absolute',\r\n                bottom: 0,\r\n                right: 3,\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default UserAvatar\r\n","import md5 from 'md5';\r\n\r\nconst getAvatar = (email = '') => {\r\n\r\n    email = email.trim();\r\n    email = email.toLowerCase()\r\n    const hash = md5(email)\r\n    const url = `https://www.gravatar.com/avatar/${hash}?d=identicon&f=y&s=128`\r\n    return url\r\n}\r\n\r\nexport default getAvatar","export const types = {\r\n\r\n    chatListUsers: 'chat/list/users',\r\n    chatActivate: 'chat/activate',\r\n    chatSendMessage: 'chat/send/message',\r\n    chatLoad: 'chat/load',\r\n\r\n    authLogout: '/auth/logout',\r\n\r\n    chatlist: 'chat/list/',\r\n    chatTyping: 'chat/Typing',\r\n    chatNotTyping: 'chat/not/Typing',\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n","import { types } from \"../variables/types\";\r\n\r\n\r\nexport const startListUsers = (users) => ({\r\n    type: types.chatListUsers,\r\n    payload: users\r\n})\r\n\r\n\r\nexport const startChatActivate = (user) => ({\r\n    type: types.chatActivate,\r\n    payload: user\r\n})\r\n\r\nexport const startSendMessage = (message) => ({\r\n    type: types.chatSendMessage,\r\n    payload: message\r\n})\r\n\r\n\r\nexport const startLoadMessage = (messages) => ({\r\n    type: types.chatLoad,\r\n    payload: messages\r\n})\r\n\r\nexport const startLogout = () => ({\r\n    type: types.authLogout\r\n})\r\n\r\nexport const startChatsList = (chats) => ({\r\n    type: types.chatlist, payload: chats\r\n})\r\n\r\nexport const startChatTyping = (id) => ({\r\n    type: types.chatTyping, payload: id\r\n})\r\nexport const startNotChatTyping = (id) => ({\r\n    type: types.chatNotTyping, payload: id\r\n})","import React, { useContext } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport '../../variables/iconos'\r\nimport { Flex, VStack, Box, Text, Stack, Heading } from '@chakra-ui/layout'\r\nimport { IconButton } from '@chakra-ui/react'\r\nimport { Button } from '@chakra-ui/button'\r\nimport { useColorMode } from '@chakra-ui/color-mode'\r\nimport { Menu, MenuButton, MenuDivider, MenuItem, MenuList } from '@chakra-ui/menu'\r\nimport { AuthContext } from '../../contexts/AuthContext';\r\nimport UserAvatar from '../forms/UserAvatar'\r\nimport getAvatar from '../../helpers/avatarUrl'\r\nimport { useDispatch } from 'react-redux'\r\nimport { startLogout } from '../../actions/chat'\r\nimport { Link } from 'react-router-dom'\r\nimport { Tooltip } from '@chakra-ui/tooltip'\r\nimport { Icon } from '@chakra-ui/react'\r\n\r\n\r\n\r\n\r\nconst SidebarMenu = () => {\r\n    const { auth, setAuth } = useContext(AuthContext)\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n    const dispatch = useDispatch()\r\n    const handleLogout = () => {\r\n        dispatch(startLogout())\r\n        localStorage.removeItem('token')\r\n        setAuth({ user: null, token: null, cheking: false });\r\n    }\r\n\r\n    return (\r\n        <Flex direction=\"column\" align=\"center\" justify='space-around' h='full'>\r\n            <VStack>\r\n                <Tooltip label=\"Home\" placement='auto-start'>\r\n                    <Link to='/'>\r\n                        <Button >\r\n                            <FontAwesomeIcon icon={['fa', 'home']} />\r\n                        </Button>\r\n                    </Link>\r\n                </Tooltip>\r\n                <Tooltip label=\"Mensajes\" placement='auto-start'>\r\n                    <Link to='/messages'>\r\n                        <Button >\r\n                            <FontAwesomeIcon icon={['fa', 'comment-dots']} />\r\n                        </Button>\r\n                    </Link>\r\n                </Tooltip>\r\n                <Tooltip label=\"Perfil\" placement='auto-start'>\r\n                    <Link to='profile/' >\r\n                        <Button>\r\n                            <FontAwesomeIcon icon={['fa', 'user']} />\r\n                        </Button>\r\n                    </Link>\r\n                </Tooltip>\r\n            </VStack>\r\n            <VStack>\r\n                {/* <Button>\r\n                    <FontAwesomeIcon icon={['fa', 'code']} />\r\n                </Button>\r\n                <Button>\r\n                    <FontAwesomeIcon icon={['fa', 'code']} />\r\n                </Button> */}\r\n            </VStack>\r\n            <VStack>\r\n\r\n                <Button onClick={toggleColorMode}>\r\n                    {colorMode === \"light\" ? <FontAwesomeIcon icon={['fa', 'moon']} /> : <FontAwesomeIcon icon={['fa', 'lightbulb']} />}\r\n                </Button>\r\n\r\n\r\n                <Menu>\r\n                    <MenuButton as={IconButton} icon={<UserAvatar size='sm' src={auth.user.picture ?? getAvatar(auth.user.email)} />} />\r\n                    <MenuList zIndex='1000' border='0'  >\r\n                        <Box p='3'>\r\n                            <Box textAlign='center'>\r\n                                <UserAvatar size='2xl' src={auth.user.picture ?? getAvatar(auth.user.email)} />\r\n                            </Box>\r\n                            <Stack spacing={0} align={'center'} mb={5}>\r\n                                <Heading fontSize={'2xl'} fontWeight={500} fontFamily={'body'}>\r\n                                    {auth.user.username}\r\n                                </Heading>\r\n                                <Text color={'gray.500'}>{auth.user.email}</Text>\r\n                            </Stack>\r\n                        </Box>\r\n                        <Link to='profile/' >\r\n                            <MenuItem command=\"⌘T\">🤵 perfil </MenuItem>\r\n                        </Link>\r\n                        <MenuItem command=\"⌘T\">\r\n                            ⚙️ Configuracion\r\n                        </MenuItem>\r\n                        <MenuDivider />\r\n                        <MenuItem command=\"⌘T\" onClick={handleLogout}>\r\n                            <Icon viewBox='0 0 200 200' color='red.500'>\r\n                                <path\r\n                                    fill='currentColor'\r\n                                    d='M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0'\r\n                                />\r\n                            </Icon>\r\n                            Salir\r\n                        </MenuItem>\r\n                    </MenuList>\r\n                </Menu>\r\n            </VStack>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default SidebarMenu\r\n","import React from 'react';\r\nimport { FormControl, FormErrorMessage, FormHelperText, FormLabel } from '@chakra-ui/form-control'\r\nimport { Input, } from '@chakra-ui/input'\r\nimport { ListItem, UnorderedList } from '@chakra-ui/layout'\r\n\r\nconst InputText = ({ errors, touched, isRequired = false, label, help, ...rests }) => {\r\n    const { value, ...rest } = rests\r\n    return (\r\n        <FormControl isInvalid={errors && touched} isRequired={isRequired}>\r\n            <FormLabel>{label}</FormLabel>\r\n\r\n            <Input\r\n                {...rest}\r\n                value={value || ''}\r\n            />\r\n\r\n            {errors && touched ? (\r\n                <FormErrorMessage>\r\n                    <UnorderedList>\r\n                        {\r\n                            errors instanceof Array ? (errors.map((error, key) => (<ListItem key={key}>{error}</ListItem>))) : (<ListItem>{errors}</ListItem>)\r\n                        }\r\n                    </UnorderedList>\r\n                </FormErrorMessage>\r\n            ) : (\r\n                <FormHelperText>{help}</FormHelperText>\r\n            )}\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default InputText\r\n","import { FormControl, FormErrorMessage, FormHelperText, FormLabel } from '@chakra-ui/form-control'\r\nimport { Input, InputGroup, InputRightElement } from '@chakra-ui/input'\r\nimport { ListItem, UnorderedList } from '@chakra-ui/layout'\r\nimport { Switch } from '@chakra-ui/switch'\r\nimport React, { useState } from 'react'\r\n\r\nconst InputPassword = ({ errors, touched, isRequired = false, label, help, ...rests }) => {\r\n  const [show, setShow] = useState(false)\r\n  const { value, ...rest } = rests\r\n  return (\r\n    <FormControl isInvalid={errors && touched} isRequired={isRequired}>\r\n      <FormLabel>{label}</FormLabel>\r\n      <InputGroup>\r\n\r\n        <Input\r\n          type={show ? \"text\" : \"password\"}\r\n          value={value || ''}\r\n          {...rest}\r\n        />\r\n\r\n        <InputRightElement>\r\n          <Switch\r\n            size=\"sm\"\r\n            checked={show}\r\n            onChange={(e) => setShow(e.target.checked)}\r\n          />\r\n        </InputRightElement>\r\n\r\n      </InputGroup>\r\n\r\n      {errors && touched ? (\r\n        <FormErrorMessage>\r\n          <UnorderedList>\r\n            {\r\n              errors instanceof Array ? (errors.map((error, key) => (<ListItem key={key}>{error}</ListItem>))) : (<ListItem>{errors}</ListItem>)\r\n            }\r\n          </UnorderedList>\r\n        </FormErrorMessage>\r\n      ) : (\r\n        <FormHelperText>{help}</FormHelperText>\r\n      )}\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default InputPassword\r\n","import * as yup from 'yup';\r\n\r\nexport const loginValidator = yup.object().shape({\r\n    username: yup.string().required('El username es obligatorio'),\r\n    password: yup.string().required('El password es obligatorio'),\r\n})\r\n\r\n\r\nexport const singupValidator = yup.object().shape({\r\n    username: yup.string().required('El username es obligatorio'),\r\n    password: yup.string().required('El password es obligatorio').min(6, 'La contraseña debe contener al menos 6 caracteres'),\r\n    password2: yup.string().required('El password es obligatorio').min(6, 'La contraseña debe contener al menos 6 caracteres').oneOf([yup.ref('password'), null], 'Las contraseñas no coinciden'),\r\n    firstName: yup.string().required('El nombre es requerido'),\r\n    lastName: yup.string().required('El Apellido es requerido'),\r\n    email: yup.string().required('El email es requerido').email('No es un email válido'),\r\n    gender: yup.string().required('El Genero es requerido'),\r\n\r\n})","import React, { useContext } from 'react'\r\nimport { Button } from '@chakra-ui/button'\r\nimport { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport { Box, Heading, Stack } from '@chakra-ui/layout'\r\nimport InputText from '../forms/InputText'\r\nimport { useFormik } from 'formik';\r\nimport InputPassword from '../forms/InputPassword'\r\nimport { Link } from 'react-router-dom'\r\nimport { loginValidator } from '../../validators/validator'\r\nimport { FormControl, FormLabel } from '@chakra-ui/form-control'\r\nimport { Switch } from '@chakra-ui/switch'\r\nimport { AuthContext } from '../../contexts/AuthContext'\r\nimport axs from '../../helpers/axios'\r\n\r\n\r\nconst Login = () => {\r\n\r\n    const { setAuth } = useContext(AuthContext)\r\n\r\n\r\n    const login = (username, password) => {\r\n\r\n        axs({\r\n            method: 'POST',\r\n            url: 'auth/login',\r\n            data: { username, password }\r\n        }).then((res) => {\r\n            console.log(res);\r\n            const { user, token } = res.data\r\n            localStorage.setItem('token', token)\r\n            setAuth({ user, token, cheking: false })\r\n\r\n        }).catch((err) => {\r\n            console.log(err.response);\r\n            if (err.response?.data) {\r\n                formik.setErrors(err.response.data)\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (data) => {\r\n        const remember = data.remember\r\n        remember ? localStorage.setItem('username', data.username) : localStorage.removeItem('username')\r\n        login(data.username, data.password)\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues:\r\n        {\r\n            remember: true,\r\n            username: localStorage.getItem('username')\r\n        },\r\n        onSubmit: handleSubmit,\r\n        validationSchema: loginValidator\r\n    })\r\n\r\n\r\n    return (\r\n        <Box as={'form'} mt={10} onSubmit={formik.handleSubmit} >\r\n            <Heading mb='2'>Login</Heading>\r\n            <Stack spacing={4}>\r\n                <InputText\r\n                    errors={formik.errors.username}\r\n                    touched={formik.touched.username}\r\n                    isRequired={true}\r\n                    label='Username'\r\n                    help='Ingrese su nombre de usuario'\r\n                    type='text'\r\n                    variant=\"filled\"\r\n                    placeholder=\"Usuario\"\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.600\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('username')}\r\n                />\r\n\r\n                <InputPassword\r\n                    errors={formik.errors.password}\r\n                    touched={formik.touched.password}\r\n                    isRequired={true}\r\n                    label='Password'\r\n                    help='Ingrese la contraseña'\r\n                    variant=\"filled\"\r\n                    placeholder=\"Contraseña\"\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('password')}\r\n                />\r\n\r\n                <FormControl display=\"flex\" alignItems=\"center\">\r\n                    <FormLabel htmlFor=\"email-alerts\" mb=\"0\">\r\n                        ¿Recordarme cuenta?\r\n                    </FormLabel>\r\n                    <Switch {...formik.getFieldProps('remember')} defaultChecked />\r\n                </FormControl>\r\n\r\n            </Stack>\r\n            <Button\r\n                type=\"submit\"\r\n                fontFamily={'heading'}\r\n                mt={8}\r\n                w={'full'}\r\n                bgGradient=\"linear(to-r, red.400,pink.400)\"\r\n                color={'white'}\r\n                _hover={{\r\n                    bgGradient: 'linear(to-r, red.400,pink.400)',\r\n                    boxShadow: 'xl',\r\n                }}\r\n                disabled={formik.isValid ? false : true}\r\n            >\r\n                Iniciar sesión\r\n            </Button>\r\n\r\n            <Link to=\"/auth/signup\" >\r\n                <Button\r\n                    w=\"full\"\r\n                    variant=\"link\"\r\n                    shadow=\"none\"\r\n                    _focus={{ outline: \"none\" }}\r\n                >\r\n                    Crear cuenta\r\n                </Button>\r\n            </Link>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import { FormControl, FormErrorMessage, FormHelperText, FormLabel } from '@chakra-ui/form-control'\r\nimport { ListItem, UnorderedList } from '@chakra-ui/layout'\r\nimport { Select } from '@chakra-ui/select'\r\nimport React from 'react'\r\n\r\nconst InputSelect = ({ errors, touched, isRequired = false, label, help, options = [], ...rest }) => {\r\n    return (\r\n        <FormControl isInvalid={errors && touched} isRequired={isRequired}>\r\n            <FormLabel>{label}</FormLabel>\r\n\r\n            <Select {...rest}>\r\n                {options.map(value => (\r\n                    <option value={value.value} key={value.value}>{value.name}</option>\r\n                ))}\r\n\r\n            </Select>\r\n\r\n            {errors && touched ? (\r\n                <FormErrorMessage>\r\n                    <UnorderedList>\r\n                        {\r\n                            errors instanceof Array ? (errors.map((error, key) => (<ListItem key={key}>{error}</ListItem>))) : (<ListItem>{errors}</ListItem>)\r\n                        }\r\n                    </UnorderedList>\r\n                </FormErrorMessage>\r\n            ) : (\r\n                <FormHelperText>{help}</FormHelperText>\r\n            )}\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default InputSelect\r\n","import { Button } from '@chakra-ui/button'\r\nimport { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport { Heading, Stack } from '@chakra-ui/layout'\r\nimport { useFormik } from 'formik'\r\nimport React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { AuthContext } from '../../contexts/AuthContext'\r\nimport axs from '../../helpers/axios'\r\nimport { singupValidator } from '../../validators/validator'\r\nimport InputPassword from '../forms/InputPassword'\r\nimport InputSelect from '../forms/InputSelect'\r\nimport InputText from '../forms/InputText'\r\n\r\nconst Signup = () => {\r\n\r\n    const { setAuth } = useContext(AuthContext)\r\n    const handleSubmit = (data) => {\r\n        axs({\r\n            method: 'POST',\r\n            url: '/auth/signup',\r\n            data\r\n        }).then(res => {\r\n            console.log(res);\r\n            const { user, token } = res.data\r\n            localStorage.setItem('token', token)\r\n            setAuth({ user, token })\r\n        }).catch(err => {\r\n            formik.setErrors(err.response.data)\r\n        })\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {},\r\n        onSubmit: handleSubmit,\r\n        validationSchema: singupValidator\r\n    })\r\n\r\n    return (\r\n        <Stack spacing={4} as='form' onSubmit={formik.handleSubmit}>\r\n            <Heading mb='2'>Signup</Heading>\r\n            <InputText\r\n                errors={formik.errors.username}\r\n                touched={formik.touched.username}\r\n                isRequired={true}\r\n                label='Username'\r\n                help='Ingrese un nombre de usuario'\r\n                type='text'\r\n                variant=\"filled\"\r\n                placeholder=\"Usuario\"\r\n                _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                autoComplete=\"none\"\r\n                {...formik.getFieldProps('username')}\r\n            />\r\n\r\n            <Stack direction={{ base: 'column', lg: 'row' }}>\r\n                <InputPassword\r\n                    errors={formik.errors.password}\r\n                    touched={formik.touched.password}\r\n                    isRequired={true}\r\n                    label='Password'\r\n                    help='Ingrese la contraseña'\r\n                    variant=\"filled\"\r\n                    placeholder=\"Contraseña\"\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('password')}\r\n                />\r\n\r\n                <InputPassword\r\n                    errors={formik.errors.password2}\r\n                    touched={formik.touched.password2}\r\n                    isRequired={true}\r\n                    label='Confirmar contraseña'\r\n                    help='Confirmar Contraseña'\r\n                    variant=\"filled\"\r\n                    placeholder=\"Contraseña\"\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('password2')}\r\n                />\r\n            </Stack>\r\n            <Stack direction={{ base: 'column', lg: 'row' }}>\r\n                <InputText\r\n                    errors={formik.errors.firstName}\r\n                    touched={formik.touched.firstName}\r\n                    isRequired={true}\r\n                    label='Nombre '\r\n                    help='Ingrese su nombre '\r\n                    type='text'\r\n                    variant=\"filled\"\r\n                    placeholder=\"Nombre \"\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('firstName')}\r\n                />\r\n                <InputText\r\n                    errors={formik.errors.lastName}\r\n                    touched={formik.touched.lastName}\r\n                    isRequired={true}\r\n                    label='Apellidos '\r\n                    help='Ingrese su apellido '\r\n                    type='text'\r\n                    variant=\"filled\"\r\n                    placeholder=\"apellidos \"\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('lastName')}\r\n                />\r\n\r\n\r\n            </Stack>\r\n            <Stack direction={{ base: 'column', lg: 'row' }}>\r\n                <InputText\r\n                    errors={formik.errors.email}\r\n                    touched={formik.touched.email}\r\n                    isRequired={true}\r\n                    label='Email'\r\n                    help='Ingrese su correo'\r\n                    type='email'\r\n                    variant=\"filled\"\r\n                    placeholder=\"Email\"\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n\r\n                <InputSelect\r\n                    errors={formik.errors.gender}\r\n                    touched={formik.touched.gender}\r\n                    isRequired={true}\r\n                    label='Género'\r\n                    help='Ingrese su género'\r\n                    placeholder=\"Seleccione el género...\"\r\n                    variant=\"filled\"\r\n                    bg={useColorModeValue(\"gray.50\", \"gray.700\")}\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('gender')}\r\n                    options={[\r\n                        { value: 'Masculino', name: 'Masculino' },\r\n                        { value: 'Femenino', name: 'Femenino' },\r\n                        { value: 'Otro', name: 'Otro' },\r\n                    ]}\r\n                />\r\n            </Stack>\r\n\r\n            <Button\r\n                fontFamily={'heading'}\r\n                type=\"submit\"\r\n                mt={8}\r\n                w={'full'}\r\n                bgGradient=\"linear(to-r, red.400,pink.400)\"\r\n                color={'white'}\r\n                _hover={{\r\n                    bgGradient: 'linear(to-r, red.400,pink.400)',\r\n                    boxShadow: 'xl',\r\n                }}\r\n                disabled={formik.isValid && Object.keys(formik.touched).length !== 0 ? false : true}\r\n            >\r\n                Crear cuenta\r\n            </Button>\r\n\r\n            <Link to=\"/auth/login\" >\r\n                <Button\r\n                    w=\"full\"\r\n                    variant=\"link\"\r\n                    shadow=\"none\"\r\n                    _focus={{ outline: \"none\" }}\r\n                >\r\n                    Login\r\n                </Button>\r\n            </Link>\r\n\r\n        </Stack>\r\n    )\r\n}\r\n\r\nexport default Signup\r\n","import { Image } from '@chakra-ui/image'\r\nimport React from 'react'\r\nimport { Container, Flex, Stack, Box } from \"@chakra-ui/layout\";\r\nimport { useLocation } from 'react-router';\r\nimport Login from '../components/auth/Login';\r\nimport Signup from '../components/auth/Signup';\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\n\r\n\r\n\r\nconst AuthPage = () => {\r\n    const path = useLocation().pathname;\r\n    return (\r\n        <Container\r\n            as={Flex}\r\n            maxW={\"7xl\"}\r\n            minH='100vh'\r\n            align=\"center\"\r\n            justifyContent='center'\r\n            flexDir={{ base: 'column-reverse', md: 'row' }}\r\n\r\n        >\r\n            <Stack flex='3' >\r\n                <Image src=\"https://mdbootstrap.com/img/Photos/new-templates/bootstrap-login-form/draw2.svg\" alt=\"Segun Adebayo\" />\r\n\r\n            </Stack>\r\n            <Stack flex='2' m={5}>\r\n\r\n                <Box bg={useColorModeValue('gray.50', 'gray.800')} p='10' rounded=\"2xl\" boxShadow='lg'>\r\n\r\n                    {path === \"/auth/login\" ? <Login /> : <Signup />}\r\n                </Box>\r\n            </Stack>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default AuthPage\r\n","import moment from 'moment'\r\nimport 'moment/locale/es'\r\nmoment.locale('es')\r\n\r\nexport const dateFormat = (date) => {\r\n    return moment(date).format('LLLL')\r\n    // return moment(date).format('DD/MM/YYYY hh:mm a')\r\n}\r\n\r\nexport const disconnectedIn = (date) => {\r\n    return moment(date).startOf('min').fromNow(true);\r\n}\r\n","import React from 'react'\r\nimport { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport { Flex, Stack, Text } from '@chakra-ui/layout'\r\nimport UserAvatar from '../forms/UserAvatar'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport '../../variables/iconos'\r\nimport { dateFormat } from '../../helpers/dateFormat'\r\nimport getAvatar from '../../helpers/avatarUrl'\r\nconst Chat = ({ me = false, message }) => {\r\n    const bgChat = useColorModeValue(me ? 'gray.100' : 'cyan.100', me ? 'gray.800' : 'blue.900');\r\n    return (\r\n        <Flex maxW={{ base: '85%', lg: '80%' }} w='fit-content' align='end' ms={me ? 'auto' : '0'} my='2'>\r\n            {!me && <UserAvatar size='sm' src={message.from.picture ?? getAvatar(message.from.email)} />}\r\n\r\n            <Stack\r\n                bg={bgChat}\r\n                boxShadow={'lg'}\r\n                p={8}\r\n                rounded={'xl'}\r\n                pos={'relative'}\r\n                _after={{\r\n                    content: `\"\"`,\r\n                    w: 0,\r\n                    h: 0,\r\n                    border: '10px solid transparent',\r\n                    borderLeftColor: me ? 'transparent' : bgChat,\r\n                    borderTopColor: me ? 'transparent' : bgChat,\r\n\r\n                    borderRightColor: me ? bgChat : 'transparent',\r\n                    borderBlockColor: me ? bgChat : 'transparent',\r\n\r\n                    pos: 'absolute',\r\n                    bottom: '-10px',\r\n                    left: me ? 'initial' : '0',\r\n                    right: me ? '0' : 'initial'\r\n                }}>\r\n                <Text\r\n\r\n                    color={useColorModeValue('gray.600', 'gray.400')}\r\n                    fontSize={'md'}>\r\n                    {message.content}\r\n                </Text>\r\n                <Text fontSize='small' textAlign={me ? 'left' : 'right'}><FontAwesomeIcon icon={['fa', 'clock']} /> {dateFormat(message.createdAt)}</Text>\r\n\r\n            </Stack>\r\n            {me && <UserAvatar size='sm' src={message.from.picture ?? getAvatar(message.from.email)} />}\r\n\r\n        </Flex>\r\n\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","\r\nimport { Box } from '@chakra-ui/layout'\r\nimport React, { useContext } from 'react'\r\nimport Chat from './Chat'\r\nimport { useSelector } from 'react-redux'\r\nimport { AuthContext } from '../../contexts/AuthContext'\r\nconst ChatContainer = () => {\r\n\r\n    const messages = useSelector(state => state.chat.messages)\r\n    const { auth } = useContext(AuthContext)\r\n\r\n    return (\r\n        <Box h='full' p='2' className='scroll' id='chatContainer'>\r\n            {\r\n                messages.map(message => (\r\n                    <Chat me={auth.user._id === message.from._id} message={message} key={message._id} />\r\n\r\n                ))\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ChatContainer\r\n","import { animateScroll } from 'react-scroll'\r\n\r\n\r\nexport const scrollBottom = (containerId, duration = 0) => {\r\n    animateScroll.scrollToBottom({ containerId, duration })\r\n}\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport io from 'socket.io-client';\r\nimport { startChatsList, startChatTyping, startListUsers, startNotChatTyping, startSendMessage } from '../actions/chat';\r\nimport { scrollBottom } from '../helpers/scroll';\r\n\r\n\r\nexport const useSocket = (serverPath) => {\r\n\r\n    // const socket = useMemo(() => io.connect(serverPath, { transports: ['websocket'] }), [serverPath]);\r\n\r\n    const [socket, setSocket] = useState(null)\r\n    const [online, setOnline] = useState(false);\r\n    const dispatch = useDispatch()\r\n\r\n    const connectSocket = useCallback((token) => {\r\n        const socketTem = io.connect(serverPath,\r\n            {\r\n                transports: ['websocket'],\r\n                forceNew: true,\r\n                query: { token }\r\n            }\r\n        )\r\n        setSocket(socketTem)\r\n    }, [serverPath])\r\n\r\n    const disconnectSocket = useCallback(() => {\r\n        socket?.disconnect();\r\n    }, [socket])\r\n\r\n\r\n    useEffect(() => {\r\n        setOnline(socket?.connected);\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n        socket?.on('connect', () => setOnline(true));\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n        socket?.on('disconnect', () => setOnline(false));\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n        // obtener todo los usuarios\r\n        socket?.on('list-users', (users) => {\r\n            dispatch(startListUsers(users))\r\n        })\r\n    }, [socket, dispatch])\r\n    useEffect(() => {\r\n        // obtener todo los mensajes del usuario\r\n        socket?.on('list-messages', (messages) => {\r\n            dispatch(startChatsList(messages))\r\n        })\r\n    }, [socket, dispatch])\r\n\r\n    useEffect(() => {\r\n        // recibir mensajes privador\r\n        socket?.on('receive-message', (message) => {\r\n            dispatch(startSendMessage(message))\r\n            scrollBottom('chatContainer', 0)\r\n        })\r\n    }, [socket, dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n        socket?.on('typing', (id) => {\r\n            dispatch(startChatTyping(id))\r\n        })\r\n    }, [socket, dispatch])\r\n\r\n    useEffect(() => {\r\n        socket?.on('not-typing', (id) => {\r\n            dispatch(startNotChatTyping(id))\r\n        })\r\n    }, [socket, dispatch])\r\n\r\n    return {\r\n        socket,\r\n        online,\r\n        connectSocket,\r\n        disconnectSocket,\r\n    }\r\n}","import React, { useContext, useEffect } from 'react';\r\nimport { createContext } from 'react';\r\nimport { useSocket } from '../hooks/useSocket';\r\nimport { AuthContext } from './AuthContext';\r\n\r\n\r\nexport const SocketContext = createContext();\r\n\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n\r\n    const { socket, online, connectSocket, disconnectSocket } = useSocket(process.env.REACT_APP_API_URL);\r\n\r\n    const { auth } = useContext(AuthContext)\r\n\r\n    useEffect(() => {\r\n        if (auth.token) {\r\n            connectSocket(auth.token);\r\n        }\r\n    }, [auth.token, connectSocket])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!auth.token) {\r\n            disconnectSocket();\r\n        }\r\n    }, [auth.token, disconnectSocket])\r\n\r\n\r\n    return (\r\n        <SocketContext.Provider value={{ socket, online }}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    )\r\n}","import { Button } from '@chakra-ui/button'\r\nimport { Input } from '@chakra-ui/input'\r\nimport { Flex, Stack } from '@chakra-ui/layout'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport React, { useContext, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { AuthContext } from '../../contexts/AuthContext'\r\nimport { SocketContext } from '../../contexts/SocketContext'\r\nimport '../../variables/iconos'\r\n\r\nconst ControlChat = () => {\r\n\r\n    const [message, setmessage] = useState('')\r\n    const { socket } = useContext(SocketContext)\r\n    const { auth } = useContext(AuthContext)\r\n    const userSelected = useSelector(state => state.chat.userSelected)\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (message.trim().length !== 0) {\r\n            // enviar mensaje\r\n            socket.emit('send-message', {\r\n                from: auth.user._id,\r\n                to: userSelected._id,\r\n                content: message\r\n            })\r\n            setmessage('')\r\n        }\r\n    }\r\n\r\n    const emitTyping = () => {\r\n        console.log('typing');\r\n        socket.emit('typing', { from: auth.user._id, to: userSelected._id })\r\n\r\n    }\r\n    const emitNotTyping = () => {\r\n        console.log('no typing');\r\n        socket.emit('not-typing', { from: auth.user._id, to: userSelected._id })\r\n    }\r\n    return (\r\n        <Flex\r\n            h={16}\r\n            alignItems={'center'}\r\n            justifyContent={'space-between'}\r\n            p={4}\r\n            as='form'\r\n            onSubmit={handleSubmit}\r\n        >\r\n\r\n            <Input type='text' value={message} placeholder='Enviar mensaje' variant='filled'\r\n                onChange={(e) => {\r\n                    setmessage(e.target.value);\r\n                }}\r\n                onFocus={emitTyping}\r\n                onBlur={emitNotTyping}\r\n            />\r\n\r\n            <Stack direction={'row'} spacing={7} mx='3'>\r\n\r\n                <Button type='submit' ><FontAwesomeIcon icon={['fa', 'paper-plane']} /></Button>\r\n            </Stack>\r\n\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default ControlChat\r\n","\r\nimport { Box, Divider, Flex, Grid, Heading, HStack, Text, } from '@chakra-ui/layout'\r\nimport { IconButton } from '@chakra-ui/react'\r\nimport UserAvatar from '../forms/UserAvatar'\r\nimport { useSelector } from 'react-redux';\r\nimport getAvatar from '../../helpers/avatarUrl';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport '../../variables/iconos'\r\nimport { dateFormat } from '../../helpers/dateFormat';\r\nimport { Menu, MenuButton, MenuItem, MenuList } from '@chakra-ui/react';\r\nimport { ExternalLinkIcon, HamburgerIcon } from '@chakra-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NavbarChat = () => {\r\n    const userSelected = useSelector(state => state.chat.userSelected)\r\n    return (\r\n        <Box rounded='lg'>\r\n            <Flex alignItems={'center'} justifyContent={'space-between'} py={3} mx='1'>\r\n                <HStack>\r\n                    <UserAvatar src={userSelected.picture ?? getAvatar(userSelected.email)} online={userSelected.online} />\r\n                    <Grid>\r\n                        <Heading fontSize={{ base: 'md', lg: 'xl' }} fontFamily={'body'} whiteSpace='nowrap' overflow='hidden' textOverflow='ellipsis'>\r\n                            {userSelected.firstName} {userSelected.lastName}\r\n                        </Heading>\r\n                        <Flex direction={{ base: 'column', lg: 'row' }} >\r\n                            <Text me='3' fontWeight={600} color={'gray.500'}>\r\n                                {userSelected.email}\r\n                            </Text>\r\n                            <Text fontSize='small' my='auto'>\r\n                                <FontAwesomeIcon icon={['fa', 'clock']} />  {dateFormat(userSelected.lastLogin)}\r\n                            </Text>\r\n                        </Flex>\r\n                    </Grid>\r\n                </HStack>\r\n\r\n                <Flex alignItems={'center'}>\r\n                    <Menu>\r\n                        <MenuButton\r\n                            as={IconButton}\r\n                            aria-label='Options'\r\n                            icon={<HamburgerIcon />}\r\n                            variant='outline'\r\n                        />\r\n                        <MenuList>\r\n                            <Link to={`/profile/${userSelected._id}`}>\r\n                                <MenuItem icon={<ExternalLinkIcon />} >\r\n                                    Ver perfil\r\n                                </MenuItem>\r\n                            </Link>\r\n                        </MenuList>\r\n                    </Menu>\r\n                </Flex>\r\n            </Flex>\r\n            <Divider />\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default NavbarChat\r\n","import { Flex } from '@chakra-ui/layout'\r\nimport React from 'react'\r\nimport ChatContainer from './ChatContainer'\r\nimport ControlChat from './ControlChat'\r\nimport NavbarChat from './NavbarChat'\r\n\r\nconst MainChat = () => {\r\n    return (\r\n        <Flex direction=\"column\" h='full'>\r\n            <NavbarChat />\r\n            <ChatContainer flex='1' />\r\n            <ControlChat />\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default MainChat\r\n","import { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport { Box, Flex, Heading, HStack, Text, Grid } from '@chakra-ui/layout'\r\nimport { useMediaQuery } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { startChatActivate, startLoadMessage } from '../../actions/chat'\r\nimport getAvatar from '../../helpers/avatarUrl'\r\nimport axs from '../../helpers/axios'\r\nimport { disconnectedIn } from '../../helpers/dateFormat'\r\nimport { scrollBottom } from '../../helpers/scroll'\r\n// import getAvatar from '../../helpers/avatarUrl'\r\nimport UserAvatar from '../forms/UserAvatar'\r\n\r\nconst ChatItem = ({ chat, setShow }) => {\r\n    const dispatch = useDispatch();\r\n    const userSelected = useSelector(state => state.chat.userSelected)\r\n    const active = useColorModeValue('gray.200', 'gray.700');\r\n    const [isLg] = useMediaQuery('(min-width: 62em)')\r\n\r\n    const handleClick = () => {\r\n\r\n        if (userSelected?._id !== chat._id) {\r\n            setShow(isLg)\r\n            dispatch(startChatActivate(chat));\r\n            axs({\r\n                url: `message/${chat._id}`,\r\n                headers: { 'Authorization': localStorage.getItem('token') }\r\n            }).then((res) => {\r\n                dispatch(startLoadMessage(res.data))\r\n                scrollBottom('chatContainer', 0)\r\n            }).catch((err) => {\r\n                console.log(err.response);\r\n            })\r\n        }\r\n    }\r\n    return (\r\n\r\n        <Flex\r\n            justify='space-between' py={4} px={2}\r\n            _hover={{ backgroundColor: active }}\r\n            cursor='pointer' rounded='md'\r\n            onClick={handleClick}\r\n            bg={\r\n                chat._id === userSelected?._id ? active : 'initial'\r\n            }\r\n        >\r\n            <HStack >\r\n                <UserAvatar online={chat.online} src={chat.picture ?? getAvatar(chat.email)} />\r\n                <Grid>\r\n                    <Heading size='sm'>{chat.username}</Heading>\r\n                    <Text color={'gray.500'} whiteSpace='nowrap' overflow='hidden' textOverflow='ellipsis' >\r\n                        {chat.sendMe ? null : 'Tú:'}{chat.content}\r\n                    </Text>\r\n                </Grid>\r\n            </HStack>\r\n\r\n            <Box whiteSpace='nowrap'>\r\n                {chat.online ? (\r\n                    <Text color='green' fontSize='sm'>En linea</Text>\r\n                ) : (\r\n                    <Text fontSize='sm'>{disconnectedIn(chat.lastLogin)}</Text>\r\n                )}\r\n                <Text color='green' fontSize='sm'>{chat.typing ? 'Escribiendo...' : ''}</Text>\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default ChatItem\r\n","import { Box, Text } from '@chakra-ui/layout'\r\nimport { useMediaQuery } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { startChatActivate, startLoadMessage } from '../../actions/chat'\r\nimport getAvatar from '../../helpers/avatarUrl'\r\nimport axs from '../../helpers/axios'\r\nimport { scrollBottom } from '../../helpers/scroll'\r\nimport UserAvatar from '../forms/UserAvatar'\r\n\r\nconst UsersActive = ({ user, setShow }) => {\r\n    const userSelected = useSelector(state => state.chat.userSelected)\r\n    const dispatch = useDispatch();\r\n    const [isLg] = useMediaQuery('(min-width: 62em)')\r\n    const handleClick = () => {\r\n        setShow(isLg)\r\n        if (userSelected?._id !== user._id) {\r\n            dispatch(startChatActivate(user));\r\n\r\n            axs({\r\n                url: `message/${user._id}`,\r\n                headers: { 'Authorization': localStorage.getItem('token') }\r\n            }).then((res) => {\r\n                dispatch(startLoadMessage(res.data))\r\n                scrollBottom('chatContainer', 0)\r\n            }).catch((err) => {\r\n                console.log(err.response);\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <Box cursor='pointer' onClick={handleClick}>\r\n            <UserAvatar online={user.online} src={user.picture ?? getAvatar(user.email)} />\r\n            <Text color='gray.500' textAlign='center' >{user.username}</Text>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default UsersActive\r\n","import { ChatIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Button, Flex, Grid, HStack, IconButton, Text, useColorModeValue } from \"@chakra-ui/react\"\r\nimport { useContext, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link as LinkRoute, useNavigate } from \"react-router-dom\";\r\nimport { startChatActivate, startLoadMessage } from \"../../actions/chat\";\r\nimport { AuthContext } from \"../../contexts/AuthContext\";\r\nimport getAvatar from \"../../helpers/avatarUrl\";\r\nimport axs from \"../../helpers/axios\";\r\nimport { scrollBottom } from \"../../helpers/scroll\";\r\nimport UserAvatar from \"../forms/UserAvatar\";\r\nimport { Link } from '@chakra-ui/react'\r\nconst UserItem = ({ user: usr }) => {\r\n    const bgActive = useColorModeValue('gray.200', 'gray.700');\r\n    const bgBtn = useColorModeValue('#151f21', 'gray.800')\r\n    const { auth: { user: me }, setAuth } = useContext(AuthContext)\r\n    const [user, setUser] = useState(usr)\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const userSelected = useSelector(state => state.chat.userSelected)\r\n\r\n    const toFollow = () => {\r\n        axs({\r\n            url: 'user/follow',\r\n            method: 'POST',\r\n            data: { id: user._id },\r\n            headers: { 'Authorization': localStorage.getItem('token') }\r\n        }).then(res => {\r\n            setUser(res.data.user)\r\n            setAuth(prev => ({ ...prev, user: res.data.me }))\r\n        }).catch(err => {\r\n            console.log(err.response);\r\n        })\r\n    }\r\n\r\n\r\n    const viewProfile = () => {\r\n        navigate(`/profile/${user._id}`)\r\n    }\r\n\r\n\r\n    const handleClick = () => {\r\n        if (userSelected?._id !== user._id) {\r\n            dispatch(startChatActivate(user));\r\n            axs({\r\n                url: `message/${user._id}`,\r\n                headers: { 'Authorization': localStorage.getItem('token') }\r\n            }).then((res) => {\r\n                dispatch(startLoadMessage(res.data))\r\n                scrollBottom('chatContainer', 0)\r\n            }).catch((err) => {\r\n                console.log(err.response);\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <Flex\r\n            justify='space-between' py={2}\r\n            _hover={{ backgroundColor: bgActive }}\r\n            cursor='pointer' rounded='md'\r\n            align='center'\r\n        >\r\n            <HStack >\r\n                <UserAvatar online={user.online} src={user.avatar ?? getAvatar(user.email)} />\r\n                <Grid>\r\n                    <Text whiteSpace='nowrap' overflow='hidden' textOverflow='ellipsis'>\r\n                        <Link variant='link' size='sm' onClick={viewProfile} >{user.firstName + ' ' + user.lastName}</Link>\r\n                    </Text>\r\n                    <Text color={'gray.500'} whiteSpace='nowrap' overflow='hidden' textOverflow='ellipsis' >\r\n                        {user.email}\r\n                    </Text>\r\n                </Grid>\r\n            </HStack>\r\n\r\n            <Box whiteSpace='nowrap' mx='2' textAlign='end'>\r\n                {\r\n                    user.followers.some(foll => foll._id === me._id) ? (\r\n                        <Button\r\n                            variant='outline'\r\n                            size='sm'\r\n                            bg={bgBtn}\r\n                            color={'white'}\r\n                            rounded={'md'}\r\n                            _hover={{\r\n                                transform: 'translateY(-2px)',\r\n                                boxShadow: 'lg',\r\n                            }}\r\n                            onClick={toFollow}>\r\n                            UnFollow\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            size='sm'\r\n                            bg={bgBtn}\r\n                            color={'white'}\r\n                            rounded={'md'}\r\n                            _hover={{\r\n                                transform: 'translateY(-2px)',\r\n                                boxShadow: 'lg',\r\n                            }}\r\n                            onClick={toFollow}>\r\n                            Follow\r\n                        </Button>\r\n                    )\r\n                }\r\n                <Link to='/messages' onClick={handleClick} as={LinkRoute} variant='solid'>\r\n                    <IconButton\r\n                        mx='1' size='sm'\r\n                        icon={<ChatIcon />} _hover={{\r\n                            transform: 'translateY(-2px)',\r\n                            boxShadow: 'lg',\r\n                        }}\r\n                    />\r\n                </Link>\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default UserItem\r\n","import { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport { Input } from '@chakra-ui/input'\r\nimport { Box, } from '@chakra-ui/layout'\r\nimport { useState } from 'react'\r\nimport axs from '../../helpers/axios'\r\nimport UserItem from '../home/UserItem'\r\n\r\nconst Search = () => {\r\n\r\n    const [users, setUsers] = useState([])\r\n\r\n    const handleChange = async (e) => {\r\n        const keyword = e.target.value.trim();\r\n\r\n        if (keyword) {\r\n            try {\r\n\r\n                const res = await axs({\r\n                    method: 'POST',\r\n                    url: `auth/list?keyword=${keyword}`,\r\n                    headers: { 'Authorization': localStorage.getItem('token') }\r\n                })\r\n\r\n                setUsers(res.data)\r\n\r\n            } catch (error) {\r\n                console.log(error.response);\r\n            }\r\n        } else {\r\n            setUsers([])\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Box position=\"relative\">\r\n            <Input type='search' placeholder='Buscar...' variant='filled' onChange={handleChange} />\r\n            <Box\r\n                position=\"absolute\"\r\n                zIndex='100'\r\n                bg={useColorModeValue('gray.100', 'blue.900')}\r\n                w='full'\r\n                rounded='lg'\r\n                boxShadow='2xl'\r\n            >\r\n                {\r\n                    users.map((user) => (\r\n                        <UserItem key={user._id} user={user} />\r\n                    ))\r\n                }\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Search\r\n","import { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport { Box, Divider, Flex, Grid, Heading } from '@chakra-ui/layout'\r\nimport React, { useContext } from 'react'\r\nimport ChatItem from './ChatItem'\r\nimport UsersActive from './UsersActive'\r\nimport { useSelector } from \"react-redux\";\r\nimport { useBreakpointValue } from '@chakra-ui/react'\r\nimport { AuthContext } from '../../contexts/AuthContext'\r\nimport Search from './Search'\r\n\r\nconst SidebarChat = ({ setShow }) => {\r\n    const { auth } = useContext(AuthContext)\r\n    const users = useSelector(state => state.chat.users)\r\n    const chats = useSelector(state => state.chat.chats)\r\n    const bgSidebar = useColorModeValue('gray.50', 'gray.800')\r\n    const maxW = useBreakpointValue({ base: 'initial', lg: '500px' })\r\n    return (\r\n        <Flex\r\n            direction='column'\r\n            h='full'\r\n            position={{ base: 'absolute', md: 'initial' }}\r\n            zIndex='600'\r\n            maxW={maxW}\r\n            p={3}\r\n            bg={bgSidebar}\r\n        >\r\n            <Box >\r\n                <Heading my={2} size='lg'>Chats</Heading>\r\n                <Search />\r\n                <Divider my='1' />\r\n            </Box>\r\n\r\n            <Grid templateColumns='repeat(5,1fr)'>\r\n\r\n                {\r\n                    users.filter(user => auth.user._id !== user._id).map(user => (\r\n                        <UsersActive user={user} key={user._id} setShow={setShow} />\r\n                    ))\r\n                }\r\n\r\n\r\n            </Grid>\r\n\r\n            <Heading size='md' mb={4}>Recientes</Heading>\r\n            <Box flex='1' className='scroll' >\r\n                {\r\n                    chats.map(chat => (\r\n\r\n                        <ChatItem chat={chat} key={chat._id} setShow={setShow} />\r\n                    ))\r\n                }\r\n\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default SidebarChat\r\n","import { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport { Box, Flex, Heading, Text } from '@chakra-ui/layout'\r\nimport { useMediaQuery } from '@chakra-ui/media-query'\r\nimport { Button } from '@chakra-ui/react'\r\nimport React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport MainChat from '../components/chat/MainChat'\r\nimport SidebarChat from '../components/chat/SidebarChat'\r\nconst ChatPage = () => {\r\n    const userSelected = useSelector(state => state.chat.userSelected)\r\n    const [isMd] = useMediaQuery('(min-width: 48em)')\r\n    const [show, setShow] = useState(isMd)\r\n\r\n    const bgChat = useColorModeValue('white', 'gray.900')\r\n\r\n    return (\r\n        <>\r\n            <Box position='relative' h='full' >\r\n                <Button m='2' onClick={() => setShow(prev => !prev)} position='absolute' right='0'>{show ? 'X' : '>'}</Button>\r\n                {show && (<SidebarChat setShow={setShow} />)}\r\n            </Box>\r\n            <Box bg={bgChat} flex={1} >\r\n                {userSelected ? <MainChat /> : <ChatNoSelected />}\r\n\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nconst ChatNoSelected = () => {\r\n    return (\r\n        <Flex align=\"center\" justify=\"center\" h='full' direction='column'>\r\n            <Heading\r\n                textAlign='center'\r\n                fontWeight='extrabold'\r\n                fontSize={{ base: '2xl', sm: '3xl', md: '4xl', lg: '6xl' }}\r\n                lineHeight={'110%'}\r\n                color={'green.400'}\r\n                bgClip='text'\r\n                bgGradient='linear(to-l, #5028ca, #00ff95bf)'\r\n            >\r\n                No a seleccionado ningún chat <br />\r\n            </Heading>\r\n            <Text as={'span'} color='gray.600' fontSize='xl' textAlign='center'>\r\n                usa la lupa para buscar personas\r\n            </Text>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default ChatPage\r\n","import { Box } from '@chakra-ui/layout'\r\nimport { Icon, useBreakpointValue, } from '@chakra-ui/react'\r\nimport Search from '../chat/Search'\r\nimport { BellIcon } from '@chakra-ui/icons'\r\nconst TopBar = () => {\r\n    const flex = useBreakpointValue({ base: '10', md: '8', lg: '6', xl: '2' })\r\n    return (\r\n        <>\r\n            <Box flex={1}>Bonny</Box>\r\n            <Box flex={flex}><Search /></Box>\r\n            <Box flex={1} textAlign='end'>\r\n                <Icon as={BellIcon} fontSize='x-large' />\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TopBar\r\n","import { Box, Heading } from \"@chakra-ui/react\"\r\nimport { useContext } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { AuthContext } from \"../../contexts/AuthContext\"\r\nimport UserItem from \"./UserItem\"\r\n\r\nconst SideBar = () => {\r\n    const users = useSelector(state => state.chat.users)\r\n    const { auth: { user: me } } = useContext(AuthContext)\r\n    return (\r\n        <Box>\r\n            <Heading size='md' m={4}>Usuarios</Heading>\r\n            {users.filter(u => u._id !== me._id).map(user => (\r\n                <UserItem user={user} key={user._id} />\r\n            ))}\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SideBar\r\n\r\n\r\n","import { Box, Button, CloseButton, Flex, HStack, IconButton, Image, Input, Menu, MenuButton, MenuItemOption, MenuList, MenuOptionGroup, Textarea, useColorModeValue } from \"@chakra-ui/react\"\r\nimport { AddIcon, WarningIcon } from '@chakra-ui/icons'\r\nimport { useContext, useRef, useState } from \"react\"\r\nimport axs from '../../helpers/axios'\r\nimport { AuthContext } from \"../../contexts/AuthContext\"\r\nimport UserAvatar from \"../forms/UserAvatar\"\r\nimport getAvatar from \"../../helpers/avatarUrl\"\r\n\r\nconst NewPost = ({ setPosts }) => {\r\n    const [file, setFile] = useState(null)\r\n    const [content, setContent] = useState('')\r\n    const [type, setType] = useState('public')\r\n    const fileRef = useRef()\r\n    const { auth: { user } } = useContext(AuthContext)\r\n    const toPost = () => {\r\n        if (file || content) {\r\n            const data = new FormData();\r\n            content && data.append('content', content)\r\n            file && data.append('picture', file)\r\n            data.append('type', type)\r\n\r\n            axs({\r\n                url: 'post',\r\n                method: 'POST',\r\n                headers: { 'Authorization': localStorage.getItem('token') },\r\n                data,\r\n            }).then((res) => {\r\n                setPosts(prev => ([res.data, ...prev]))\r\n                setFile(null)\r\n                setContent('')\r\n            }).catch((err) => {\r\n                console.log(err.response);\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <Box bg={useColorModeValue('gray.100', 'gray.700')} rounded='xl'>\r\n            <HStack position='relative' >\r\n                <Textarea placeholder=\"¿Qué estas pensando?\" border='0' px='20' value={content} onChange={e => setContent(e.target.value)} />\r\n                <Box position='absolute' >\r\n                    <UserAvatar online={user.online} src={user.avatar ?? getAvatar(user.email)} />\r\n                </Box>\r\n                <Input type='file' onChange={e => setFile(e.target.files[0])} ref={fileRef} display='none' accept=\".png,.jpeg,.jpg\" />\r\n            </HStack>\r\n            <hr />{file && (\r\n                <Box position='relative'>\r\n                    <CloseButton bg='gray' size='lg' position='absolute' right='0' onClick={() => setFile(null)} />\r\n                    <Image\r\n                        alt={'No imagen'}\r\n                        objectFit={'cover'}\r\n                        src={URL.createObjectURL(file)}\r\n                        w='full'\r\n                    />\r\n                </Box>\r\n            )}\r\n\r\n            <Flex p='2' justify=\"space-between\">\r\n                <HStack spacing='5'>\r\n                    <Button leftIcon={<AddIcon />} variant='link' onClick={() => fileRef.current.click()}>\r\n                        Subir foto\r\n                    </Button>\r\n\r\n                    <Menu closeOnSelect={false}>\r\n                        <MenuButton as={IconButton} icon={<WarningIcon />} variant='link'> opciones\r\n                        </MenuButton>\r\n                        <MenuList >\r\n                            <MenuOptionGroup defaultValue={type} title='Tipo de publicación' type='radio' onChange={(e) => setType(e)}>\r\n                                <MenuItemOption value='private'>Privado</MenuItemOption>\r\n                                <MenuItemOption value='follow'>solo amigos</MenuItemOption>\r\n                                <MenuItemOption value='public'>Público</MenuItemOption>\r\n                            </MenuOptionGroup>\r\n                        </MenuList>\r\n                    </Menu>\r\n                </HStack>\r\n                <Button onClick={toPost}>Publicar</Button>\r\n            </Flex>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default NewPost\r\n","import { Box, Button, chakra, Flex, Grid, Heading, HStack, Icon, Image, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, Text, useColorModeValue, useDisclosure } from \"@chakra-ui/react\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport { AuthContext } from \"../../contexts/AuthContext\"\r\nimport getAvatar from \"../../helpers/avatarUrl\"\r\nimport axs from \"../../helpers/axios\"\r\nimport { dateFormat } from \"../../helpers/dateFormat\"\r\nimport UserAvatar from \"../forms/UserAvatar\"\r\nimport NewPost from \"./NewPost\"\r\n\r\nconst MainPosts = () => {\r\n    const [posts, setPosts] = useState([])\r\n    useEffect(() => {\r\n        axs(\r\n            {\r\n                url: 'post',\r\n                method: 'GET',\r\n                headers: { 'Authorization': localStorage.getItem('token') }\r\n            }).then((res) => {\r\n                setPosts(res.data)\r\n            }).catch((err => {\r\n                console.log(err.response);\r\n            }))\r\n    }, [])\r\n\r\n    return (\r\n        <Box p='4'>\r\n            <NewPost setPosts={setPosts} />\r\n            {posts.map((post) => (\r\n                <Post key={post._id} post={post} />\r\n            ))}\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\nconst Post = ({ post: pst }) => {\r\n    const { auth: { user } } = useContext(AuthContext)\r\n    const [post, setPost] = useState(pst)\r\n    const handleLike = () => {\r\n        axs({\r\n            url: 'post/like',\r\n            method: 'POST',\r\n            data: { id: post._id },\r\n            headers: { 'Authorization': localStorage.getItem('token') }\r\n        }).then((res) => {\r\n            setPost(res.data)\r\n        }).catch((err) => {\r\n            console.log(err.response);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Box bg={useColorModeValue('gray.100', 'gray.700')} rounded='xl' my='3'>\r\n            <Box p='1'>\r\n                <HStack justify='space-between'>\r\n                    <HStack>\r\n                        <UserAvatar online={post.user.online} src={post.user.avatar ?? getAvatar(post.user.email)} />\r\n                        <Grid>\r\n                            <Heading size='sm'>{post.user.firstName + ' ' + post.user.lastName}</Heading>\r\n                            <Text color={'gray.500'} whiteSpace='nowrap' overflow='hidden' textOverflow='ellipsis' >\r\n                                {post.user.email}\r\n                            </Text>\r\n                        </Grid>\r\n                    </HStack>\r\n                    <Text>{dateFormat(post.createdAt)}</Text>\r\n                </HStack>\r\n\r\n                <chakra.p\r\n                    p={2}>\r\n                    {post.content}\r\n                </chakra.p>\r\n            </Box>\r\n\r\n            <Box position='relative'>\r\n                {post.picture && (\r\n                    <Image\r\n                        alt={'Login Image'}\r\n                        objectFit={'cover'}\r\n                        src={post.picture}\r\n                        w='full'\r\n                        onDoubleClick={handleLike}\r\n                    />\r\n                )}\r\n                <HStack position=\"absolute\" bottom='0' m='2'>\r\n                    <Icon viewBox=\"0 0 40 35\" boxSize={10} color={post.likes.some(u => u._id === user._id) ? 'purple.600' : 'purple.200'} _hover={{ color: 'purple.500' }} onClick={handleLike} >\r\n                        <path\r\n                            fill={'currentColor'}\r\n                            d=\"M10.7964 5.04553e-07C8.66112 -0.000123335 6.57374 0.632971 4.79827 1.81922C3.0228 3.00547 1.63898 4.69158 0.82182 6.66433C0.00466116 8.63708 -0.209132 10.8079 0.207477 12.9021C0.624087 14.9964 1.65239 16.9201 3.16233 18.4299L19.1153 34.3828C19.2395 34.5074 19.3871 34.6062 19.5496 34.6736C19.7121 34.741 19.8863 34.7757 20.0622 34.7757C20.2381 34.7757 20.4123 34.741 20.5748 34.6736C20.7373 34.6062 20.8848 34.5074 21.0091 34.3828L36.962 18.4272C38.9319 16.3917 40.0228 13.6636 39.9996 10.8311C39.9764 7.99858 38.8409 5.28867 36.838 3.28573C34.835 1.28279 32.1251 0.147283 29.2926 0.124081C26.4601 0.100879 23.732 1.19184 21.6965 3.1617L20.0622 4.79337L18.4305 3.1617C17.4276 2.15892 16.237 1.36356 14.9267 0.821064C13.6163 0.278568 12.2119 -0.000433066 10.7937 5.04553e-07H10.7964Z\"\r\n                        />\r\n                    </Icon>\r\n                    <LikesModal likes={post.likes} />\r\n                </HStack>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst LikesModal = ({ likes = [] }) => {\r\n    const bgActive = useColorModeValue('gray.200', 'gray.700');\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    return (\r\n        <>\r\n            <Button onClick={onOpen} variant=\"link\">{likes.length}</Button>\r\n\r\n            <Modal isOpen={isOpen} onClose={onClose}>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>likes ({likes.length})</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        {\r\n                            likes.map((user) => (\r\n                                <Flex\r\n                                    justify='space-between' py={4} px={2}\r\n                                    _hover={{ backgroundColor: bgActive }}\r\n                                    cursor='pointer' rounded='md'\r\n                                    key={user._id}\r\n                                >\r\n                                    <HStack >\r\n                                        <UserAvatar online={user.online} src={user.avatar ?? getAvatar(user.email)} />\r\n                                        <Grid>\r\n                                            <Heading size='sm'>{user.firstName + ' ' + user.lastName}</Heading>\r\n                                            <Text color={'gray.500'} whiteSpace='nowrap' overflow='hidden' textOverflow='ellipsis' >\r\n                                                {user.email}\r\n                                            </Text>\r\n                                        </Grid>\r\n                                    </HStack>\r\n\r\n                                    <Box whiteSpace='nowrap'>\r\n                                        <Icon viewBox=\"0 0 40 35\" boxSize={7} color={'purple.600'}>\r\n                                            <path\r\n                                                fill={'currentColor'}\r\n                                                d=\"M10.7964 5.04553e-07C8.66112 -0.000123335 6.57374 0.632971 4.79827 1.81922C3.0228 3.00547 1.63898 4.69158 0.82182 6.66433C0.00466116 8.63708 -0.209132 10.8079 0.207477 12.9021C0.624087 14.9964 1.65239 16.9201 3.16233 18.4299L19.1153 34.3828C19.2395 34.5074 19.3871 34.6062 19.5496 34.6736C19.7121 34.741 19.8863 34.7757 20.0622 34.7757C20.2381 34.7757 20.4123 34.741 20.5748 34.6736C20.7373 34.6062 20.8848 34.5074 21.0091 34.3828L36.962 18.4272C38.9319 16.3917 40.0228 13.6636 39.9996 10.8311C39.9764 7.99858 38.8409 5.28867 36.838 3.28573C34.835 1.28279 32.1251 0.147283 29.2926 0.124081C26.4601 0.100879 23.732 1.19184 21.6965 3.1617L20.0622 4.79337L18.4305 3.1617C17.4276 2.15892 16.237 1.36356 14.9267 0.821064C13.6163 0.278568 12.2119 -0.000433066 10.7937 5.04553e-07H10.7964Z\"\r\n                                            />\r\n                                        </Icon>\r\n                                    </Box>\r\n                                </Flex>\r\n                            ))\r\n                        }\r\n                    </ModalBody>\r\n\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default MainPosts\r\n","import { Link as LinkRoute } from 'react-router-dom'\r\nimport { ChatIcon } from \"@chakra-ui/icons\"\r\nimport { Box, Button, Center, Flex, Heading, IconButton, Image, Link, Stack, Text, useColorModeValue } from \"@chakra-ui/react\"\r\nimport { useContext, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { startChatActivate, startLoadMessage } from \"../../actions/chat\"\r\nimport { AuthContext } from \"../../contexts/AuthContext\"\r\nimport getAvatar from \"../../helpers/avatarUrl\"\r\nimport axs from \"../../helpers/axios\"\r\nimport { scrollBottom } from \"../../helpers/scroll\"\r\nimport UserAvatar from \"../forms/UserAvatar\"\r\n\r\n\r\nconst UserCard = ({ user: usr }) => {\r\n    const bgBtn = useColorModeValue('#151f21', 'gray.900')\r\n    const [user, setUser] = useState(usr)\r\n    const { auth: { user: me }, setAuth } = useContext(AuthContext)\r\n    const dispatch = useDispatch()\r\n    const userSelected = useSelector(state => state.chat.userSelected)\r\n    const toFollow = () => {\r\n        axs({\r\n            url: 'user/follow',\r\n            method: 'POST',\r\n            data: { id: user._id },\r\n            headers: { 'Authorization': localStorage.getItem('token') }\r\n        }).then(res => {\r\n            setUser(res.data.user)\r\n            setAuth(prev => ({ ...prev, user: res.data.me }))\r\n        }).catch(err => {\r\n            console.log(err.response);\r\n        })\r\n    }\r\n    const handleClick = () => {\r\n        if (userSelected?._id !== user._id) {\r\n            dispatch(startChatActivate(user));\r\n            axs({\r\n                url: `message/${user._id}`,\r\n                headers: { 'Authorization': localStorage.getItem('token') }\r\n            }).then((res) => {\r\n                dispatch(startLoadMessage(res.data))\r\n                scrollBottom('chatContainer', 0)\r\n            }).catch((err) => {\r\n                console.log(err.response);\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <Center py={6}>\r\n            <Box\r\n                maxW={'270px'}\r\n                w={'full'}\r\n                bg={useColorModeValue('white', 'gray.800')}\r\n                boxShadow={'2xl'}\r\n                rounded={'md'}\r\n                overflow={'hidden'}>\r\n                <Image\r\n                    h={'120px'}\r\n                    w={'full'}\r\n                    src='https://fondosmil.com/fondo/31355.jpg'\r\n                    objectFit={'cover'}\r\n                />\r\n                <Flex justify={'center'} mt={-12}>\r\n                    <UserAvatar src={user?.picture ?? getAvatar(user.email)} />\r\n\r\n                </Flex>\r\n\r\n                <Box p={6}>\r\n                    <Stack spacing={0} align={'center'} mb={5}>\r\n                        <Heading fontSize={'xl'} fontWeight={500} fontFamily={'body'}>\r\n                            {user.firstName} {user.lastName}\r\n                        </Heading>\r\n                        <Text color={'gray.500'}>{user.email}</Text>\r\n                    </Stack>\r\n\r\n                    <Stack direction={'row'} justify={'center'} spacing={6}>\r\n                        <Stack spacing={0} align={'center'}>\r\n                            <Text fontWeight={600}>{user.followers.length}</Text>\r\n                            <Text fontSize={'sm'} color={'gray.500'}>\r\n                                Followers\r\n                            </Text>\r\n                        </Stack>\r\n                        <Stack spacing={0} align={'center'}>\r\n                            <Text fontWeight={600}>{user.following.length}</Text>\r\n                            <Text fontSize={'sm'} color={'gray.500'}>\r\n                                Following\r\n                            </Text>\r\n                        </Stack>\r\n                    </Stack>\r\n                    {\r\n                        user.followers.some(foll => foll._id === me._id) ? (\r\n                            <Button\r\n                                my='2'\r\n                                w='full'\r\n                                variant='outline'\r\n                                size='sm'\r\n                                bg={bgBtn}\r\n                                color={'white'}\r\n                                rounded={'md'}\r\n                                _hover={{\r\n                                    transform: 'translateY(-2px)',\r\n                                    boxShadow: 'lg',\r\n                                }}\r\n                                onClick={toFollow}>\r\n                                UnFollow\r\n                            </Button>\r\n                        ) : (\r\n                            <Button\r\n                                my='2'\r\n                                w='full'\r\n                                size='sm'\r\n                                bg={bgBtn}\r\n                                color={'white'}\r\n                                rounded={'md'}\r\n                                _hover={{\r\n                                    transform: 'translateY(-2px)',\r\n                                    boxShadow: 'lg',\r\n                                }}\r\n                                onClick={toFollow}>\r\n                                Follow\r\n                            </Button>\r\n                        )\r\n                    }\r\n\r\n                    <Link to='/messages' onClick={handleClick} as={LinkRoute} variant='solid'>\r\n                        <IconButton\r\n                            w='full'\r\n                            mx='1' size='sm'\r\n                            icon={<ChatIcon />} _hover={{\r\n                                transform: 'translateY(-2px)',\r\n                                boxShadow: 'lg',\r\n                            }}\r\n                        />\r\n                    </Link>\r\n                </Box>\r\n            </Box>\r\n        </Center>\r\n    )\r\n}\r\n\r\nexport default UserCard\r\n","\r\nimport { Box, Heading, } from \"@chakra-ui/react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport UserCard from \"../users/UserCard\"\r\n\r\nconst RightBar = () => {\r\n    const users = useSelector(state => state.chat.users)\r\n    return (\r\n        <Box>\r\n            <Heading size='md' m={4}>Personas que quizá conozcas</Heading>\r\n            {users.length > 0 && (\r\n                <>\r\n                    <UserCard user={users[Math.random() * users.length | 0]} />\r\n                    <UserCard user={users[Math.random() * users.length | 0]} />\r\n                </>\r\n            )}\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default RightBar\r\n\r\n","import TopBar from \"../components/home/TopBar\"\r\nimport { Flex, Box } from '@chakra-ui/layout'\r\nimport SideBar from \"../components/home/SideBar\"\r\nimport MainPosts from \"../components/home/MainPosts\"\r\nimport RightBar from \"../components/home/RightBar\"\r\nimport { useBreakpointValue, useColorModeValue } from \"@chakra-ui/react\"\r\nconst HomePage = () => {\r\n    const className = useBreakpointValue({ base: '', lg: 'scroll' })\r\n    return (\r\n        <Box w='full' className='scroll'>\r\n            <Flex w='full' alignItems={'center'} justifyContent='space-around' h='50px' bg={useColorModeValue('gray.100', 'blue.900')} px='1'>\r\n                <TopBar />\r\n            </Flex>\r\n            <Flex w='full' g={1} h='calc(100% - 50px)' direction={{ base: 'column', lg: 'row' }}>\r\n                <Box p='1' ><SideBar /></Box>\r\n                <Box flex={1} className={className}><MainPosts /></Box>\r\n                <Box ><RightBar /></Box>\r\n            </Flex>\r\n        </Box >\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import { Button, Flex, Heading, Text } from \"@chakra-ui/react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <Flex py={10} px={6} align=\"center\" w='full' justify=\"center\" direction='column'>\r\n            <Heading\r\n                display=\"inline-block\"\r\n                size=\"3xl\"\r\n                bgGradient=\"linear(to-r, teal.400, teal.600)\"\r\n                backgroundClip=\"text\">\r\n                404\r\n            </Heading>\r\n            <Text fontSize=\"18px\" mt={3} mb={2}>\r\n                Not Found\r\n            </Text>\r\n            <Text color={'gray.500'} mb={6}>\r\n                No encontramos la página que está intentando acceder\r\n            </Text>\r\n\r\n            <Link to='/'>\r\n                <Button\r\n                    colorScheme=\"teal\"\r\n                    bgGradient=\"linear(to-r, teal.400, teal.500, teal.600)\"\r\n                    color=\"white\"\r\n                    variant=\"solid\">\r\n                    Ir a inicio\r\n                </Button></Link>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default NotFound\r\n","import React from 'react'\r\nimport { Flex, Box, HStack } from \"@chakra-ui/layout\";\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\nimport { Skeleton, SkeletonCircle, SkeletonText } from \"@chakra-ui/react\"\r\nconst Loading = () => {\r\n    return (\r\n        <Flex h='100vh' gap='2'>\r\n            <Flex direction='column' bg={useColorModeValue('gray.50', 'gray.700')} p={2} justify='space-between' h='full'>\r\n                <Skeleton height=\"40px\" w='50px' rounded='lg' />\r\n                <Skeleton height=\"40px\" w='50px' rounded='lg' />\r\n                <Skeleton height=\"40px\" w='50px' rounded='lg' />\r\n            </Flex>\r\n\r\n            <Box bg={useColorModeValue('gray.100', 'gray.800')} p={3} overflow='hidden'>\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n            </Box>\r\n\r\n            <Box bg={useColorModeValue('gray.50', 'gray.900')} flex={1} >\r\n                <Flex align=\"center\" justify=\"space-between\">\r\n                    <Flex boxShadow=\"lg\" align='center' my={2} p={2}>\r\n                        <SkeletonCircle size=\"10\" me={2} />\r\n                        <SkeletonText mt=\"4\" noOfLines={2} spacing=\"4\" flex='1' />\r\n                    </Flex>\r\n\r\n                    <HStack>\r\n                        <Skeleton height=\"40px\" w='50px' rounded='lg' />\r\n                        <Skeleton height=\"40px\" w='50px' rounded='lg' />\r\n                    </HStack>\r\n                </Flex>\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\n\r\nconst LoadingUser = () => {\r\n    return (\r\n        <Flex w={[100, 200, 300, 400]} align='center' boxShadow='lg' my={2} p={2}>\r\n            <SkeletonCircle size=\"10\" me={2} />\r\n            <SkeletonText mt=\"4\" noOfLines={3} spacing=\"4\" flex='1' />\r\n        </Flex>\r\n    )\r\n}\r\nexport default Loading\r\n","import { Avatar } from '@chakra-ui/avatar';\r\nimport { Button } from '@chakra-ui/button';\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\nimport { Box, Flex, Grid, GridItem, List, ListItem, Text } from '@chakra-ui/layout';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport getAvatar from '../helpers/avatarUrl';\r\nimport '../variables/iconos'\r\nimport { dateFormat } from '../helpers/dateFormat';\r\nimport { Table, Tbody, Td, Tfoot, Th, Thead, Tr } from '@chakra-ui/react';\r\nimport UserItem from '../components/home/UserItem';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport axs from '../helpers/axios';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport NotFound from '../components/others/NotFound';\r\nimport Loading from '../utils/Loading';\r\nimport { startChatActivate } from '../actions/chat';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ChatIcon } from '@chakra-ui/icons';\r\nconst ProfilePage = () => {\r\n\r\n    const [btnOption, setBtnOption] = useState(1);\r\n    const bgProfile = useColorModeValue(\r\n        \"hsla(0,0%,100%,.8)\",\r\n        \"linear-gradient(112.83deg, rgba(255, 255, 255, 0.21) 0%, rgba(255, 255, 255, 0) 110.84%)\"\r\n    );\r\n\r\n    const bgCard = useColorModeValue('white', 'gray.800')\r\n    const { auth: { user: me }, setAuth } = useContext(AuthContext)\r\n    const { id } = useParams()\r\n    const [user, setUser] = useState(!id ? me : null)\r\n    const [loading, setLoading] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            setLoading(true)\r\n            axs({\r\n                url: `user/${id}`,\r\n                method: 'POST',\r\n                headers: { 'Authorization': localStorage.getItem('token') }\r\n            }).then(res => {\r\n                setUser(res.data)\r\n                setLoading(false)\r\n            }).catch(err => {\r\n                console.log(err.response);\r\n                setLoading(false)\r\n            })\r\n        } else {\r\n            setUser(me)\r\n        }\r\n\r\n    }, [id, me])\r\n\r\n    if (loading) {\r\n        return (<Loading />)\r\n    }\r\n\r\n    if (!user) {\r\n        return (<NotFound />)\r\n    }\r\n\r\n\r\n    const toFollow = () => {\r\n        axs({\r\n            url: 'user/follow',\r\n            method: 'POST',\r\n            data: { id: user._id },\r\n            headers: { 'Authorization': localStorage.getItem('token') }\r\n        }).then(res => {\r\n            console.log(res.data);\r\n            setAuth(prev => ({ ...prev, user: res.data.me }))\r\n            setUser(res.data.user)\r\n        }).catch(err => {\r\n            console.log(err.response);\r\n        })\r\n    }\r\n\r\n\r\n    const openMessage = () => {\r\n        dispatch(startChatActivate(user));\r\n    }\r\n\r\n    return (\r\n        <Flex direction=\"column\" flex='1' p='3'>\r\n            <Box mb='5'>\r\n                <Box\r\n                    bgImage='https://fondosmil.com/fondo/31355.jpg'\r\n                    w=\"100%\"\r\n                    h={{ base: '200px', lg: '300px' }}\r\n                    borderRadius=\"2xl\"\r\n                    bgPosition=\"50%\"\r\n                    bgRepeat=\"no-repeat\"\r\n                    backgroundSize=\"cover\"\r\n                >\r\n\r\n                </Box>\r\n                <Flex\r\n                    direction={{ base: \"column\", md: \"row\" }}\r\n                    w='90%'\r\n                    justifyContent={{ sm: \"center\", md: \"space-between\" }}\r\n                    align=\"center\"\r\n                    backdropFilter=\"saturate(200%) blur(60px)\"\r\n                    boxShadow=\"0px 2px 5.5px rgba(0, 0, 0, 0.02)\"\r\n                    border=\"2px solid\"\r\n                    borderColor=\"blue.900\"\r\n                    bg={bgProfile}\r\n                    p=\"15px\"\r\n                    rounded=\"2xl\"\r\n                    mt='-60px'\r\n                    mx='auto'\r\n\r\n                >\r\n                    <Flex\r\n                        align=\"center\"\r\n                        mb={{ sm: \"10px\", md: \"0px\" }}\r\n                        direction={{ base: \"column\", md: \"row\" }}\r\n                        w={{ sm: \"100%\" }}\r\n                        textAlign={{ sm: \"center\", md: \"start\" }}\r\n                    >\r\n                        <Avatar\r\n                            me={{ md: \"22px\" }}\r\n                            src={user.picture ?? getAvatar(user.email)}\r\n                            w=\"80px\"\r\n                            h=\"80px\"\r\n                            borderRadius=\"15px\"\r\n                        />\r\n                        <Flex direction=\"column\" maxWidth=\"100%\" my={{ sm: \"14px\" }}>\r\n                            <Text\r\n                                fontSize={{ sm: \"lg\", lg: \"xl\" }}\r\n                                color={\"gray.200\"}\r\n                                fontWeight=\"bold\"\r\n                                ms={{ sm: \"8px\", md: \"0px\" }}\r\n                            >\r\n                                {user.firstName + ' ' + user.lastName}\r\n                            </Text>\r\n                            <Text\r\n                                fontSize={{ sm: \"sm\", md: \"md\" }}\r\n                                color={\"gray.400\"}\r\n                                fontWeight=\"semibold\"\r\n                            >\r\n                                {user.email}\r\n                            </Text>\r\n\r\n                            {id && id !== me._id && (\r\n                                <Box>\r\n                                    {\r\n                                        user.followers.some(foll => foll._id === me._id) ? (\r\n                                            <Button size='sm' variant='outline' onClick={toFollow}>unfollow</Button>\r\n                                        ) : (\r\n                                            <Button size='sm' variant='solid' onClick={toFollow}>follow</Button>\r\n                                        )\r\n                                    }\r\n                                    <Link to='/messages' onClick={openMessage}>\r\n                                        <Button size='sm' variant='solid' ms='1'><ChatIcon /></Button>\r\n                                    </Link>\r\n                                </Box>\r\n                            )}\r\n                        </Flex>\r\n                    </Flex>\r\n                    <Flex\r\n                        direction={{ base: \"column\", lg: \"row\" }}\r\n                        w={{ sm: \"100%\", md: \"50%\", lg: \"auto\" }}\r\n                    >\r\n                        <Button\r\n                            bg={btnOption === 1 ? \"hsla(0,0%,100%,.3)\" : \"transparent\"}\r\n                            borderRadius=\"15px\"\r\n                            _focus={{ shadow: \"none\" }}\r\n                            onClick={() => {\r\n                                setBtnOption(1);\r\n                            }}\r\n                            _hover={{}}\r\n                        >\r\n                            <FontAwesomeIcon icon={['fa', 'user']} />\r\n                            <Text fontSize=\"xs\" fontWeight=\"bold\" mx='2'>\r\n                                {user.followers.length} Seguidores\r\n                            </Text>\r\n                        </Button>\r\n                        <Button\r\n                            bg={btnOption === 2 ? \"hsla(0,0%,100%,.3)\" : \"transparent\"}\r\n                            borderRadius=\"15px\"\r\n                            _focus={{ shadow: \"none\" }}\r\n                            onClick={() => {\r\n                                setBtnOption(2);\r\n                            }}\r\n                            _hover={{}}\r\n                        >\r\n                            <FontAwesomeIcon icon={['fa', 'user-check']} />\r\n                            <Text fontSize=\"xs\" fontWeight=\"bold\" mx='2'>\r\n                                {user.following.length} Seguidos\r\n                            </Text>\r\n                        </Button>\r\n                        <Button\r\n                            bg={btnOption === 3 ? \"hsla(0,0%,100%,.3)\" : \"transparent\"}\r\n                            borderRadius=\"15px\"\r\n                            _focus={{ shadow: \"none\" }}\r\n                            _hover={{}}\r\n                        >\r\n                            <FontAwesomeIcon icon={['fa', 'code']} />\r\n                            <Text fontSize=\"xs\" fontWeight=\"bold\" mx='2'>\r\n                                options\r\n                            </Text>\r\n                        </Button>\r\n                    </Flex>\r\n                </Flex>\r\n\r\n            </Box>\r\n            <Grid templateColumns=\"repeat(12,1fr)\" gap='2'>\r\n                <GridItem colSpan={[12, 12, 6, 4]}>\r\n                    <Box boxShadow='xl' p={{ base: '2', lg: '6' }} rounded='2xl' bg={bgCard}>\r\n                        <Box p=\"12px 5px\" mb=\"12px\">\r\n                            <Text fontSize=\"lg\" fontWeight=\"bold\">\r\n                                Mis datos\r\n                            </Text>\r\n                        </Box>\r\n                        <Box px=\"5px\">\r\n\r\n                            <List spacing={3}>\r\n                                <ListItem>\r\n                                    <Text color=\"gray.500\" fontWeight=\"bold\" d='inline' >Username:</Text> &nbsp; <Text color=\"gray.500\" d='inline'>{user.username}</Text>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Text color=\"gray.500\" fontWeight=\"bold\" d='inline' >Nombres</Text> &nbsp; <Text color=\"gray.500\" d='inline'>{user.firstName}</Text>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Text color=\"gray.500\" fontWeight=\"bold\" d='inline' >Apellidos</Text> &nbsp; <Text color=\"gray.500\" d='inline'>{user.lastName}</Text>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Text color=\"gray.500\" fontWeight=\"bold\" d='inline' >Email</Text> &nbsp; <Text color=\"gray.500\" d='inline'>{user.email}</Text>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Text color=\"gray.500\" fontWeight=\"bold\" d='inline' >Género</Text> &nbsp; <Text color=\"gray.500\" d='inline'>{user.gender}</Text>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Text color=\"gray.500\" fontWeight=\"bold\" d='inline' >Última sesión:</Text> &nbsp; <Text color=\"gray.500\" d='inline'> {dateFormat(user.lastLogin)}</Text>\r\n                                </ListItem>\r\n\r\n                            </List>\r\n\r\n                        </Box>\r\n                    </Box>\r\n                </GridItem>\r\n\r\n                <GridItem colSpan={[12, 12, 5, 7]} >\r\n                    <Box boxShadow='xl'>\r\n                        <TableUser users={btnOption === 1 ? user.followers : user.following} />\r\n                    </Box>\r\n                </GridItem>\r\n            </Grid>\r\n\r\n        </Flex>\r\n    );\r\n};\r\n\r\nconst TableUser = ({ users = [] }) => {\r\n\r\n    return (\r\n        <Table variant='simple' size='sm'>\r\n            <Thead>\r\n                <Tr>\r\n                    <Th>Usuarios</Th>\r\n                </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n\r\n                <Tr>\r\n                    <Td>{users.map((user) => (\r\n                        <UserItem user={user} key={user._id} />\r\n                    ))}</Td>\r\n\r\n                </Tr>\r\n            </Tbody>\r\n            <Tfoot>\r\n                <Tr>\r\n                    <Th isNumeric>Total : {users.length}</Th>\r\n                </Tr>\r\n            </Tfoot>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default ProfilePage\r\n","\r\nimport { Box, Flex, useColorModeValue } from '@chakra-ui/react';\r\nimport React, { useContext, useEffect } from 'react'\r\nimport {\r\n    Routes,\r\n    Route,\r\n    Navigate,\r\n    BrowserRouter,\r\n    Outlet,\r\n} from \"react-router-dom\";\r\nimport SidebarMenu from '../components/chat/SidebarMenu';\r\n\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport AuthPage from '../pages/AuthPage';\r\nimport ChatPage from '../pages/ChatPage';\r\nimport HomePage from '../pages/HomePage';\r\nimport ProfilePage from '../pages/ProfilePage';\r\nimport Loading from '../utils/Loading';\r\n\r\n\r\n\r\n\r\nconst AppRouter = () => {\r\n    const { auth, checkToken } = useContext(AuthContext)\r\n\r\n\r\n    useEffect(() => {\r\n        checkToken();\r\n    }, [checkToken])\r\n\r\n    if (auth.cheking) {\r\n        return <Loading />\r\n    }\r\n    return (\r\n\r\n        <BrowserRouter >\r\n            <Routes>\r\n                <Route path=\"/*\" element={<Private><HomeLayout /></Private>} >\r\n                    <Route index element={<HomePage />} />\r\n                    <Route path=\"profile\" element={<ProfilePage />} />\r\n                    <Route path=\"profile/:id\" element={<ProfilePage />} />\r\n                    <Route path='messages' element={<ChatPage />} />\r\n                </Route>\r\n                <Route path=\"auth/*\" element={<Public> <Outlet /></Public>} >\r\n                    <Route path=\"login\" element={<AuthPage />} />\r\n                    <Route path=\"signup\" element={<AuthPage />} />\r\n                </Route>\r\n            </Routes>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nconst HomeLayout = () => {\r\n    const bgMenu = useColorModeValue('gray.100', 'gray.700')\r\n    return (\r\n\r\n        <Flex h='100vh' gap='2'>\r\n            <Box bg={bgMenu} p={1} >\r\n                <SidebarMenu />\r\n            </Box>\r\n\r\n            <Outlet />\r\n        </Flex>\r\n    )\r\n}\r\n\r\n\r\nconst Private = ({ children }) => {\r\n    const { auth } = useContext(AuthContext)\r\n    return !auth.token ? <Navigate to=\"auth/login\" /> : children;\r\n}\r\n\r\nconst Public = ({ children }) => {\r\n    const { auth } = useContext(AuthContext)\r\n    return auth.token ? <Navigate to=\"/\" /> : children;\r\n}\r\n\r\n\r\n\r\nexport default AppRouter\r\n","import { types } from \"../variables/types\";\r\n\r\n\r\nconst initialState = {\r\n    userSelected: null,//id del user seleccinado\r\n    users: [], //todo los usuarios \r\n    chats: [],//todo los chats del user\r\n    messages: [],// chat seleccionado\r\n\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case types.chatListUsers:\r\n            return { ...state, users: action.payload }\r\n\r\n        case types.chatActivate:\r\n            if (state.userSelected?._id === action.payload._id) {\r\n                return state\r\n            }\r\n            return { ...state, userSelected: action.payload, messages: [] }\r\n\r\n        case types.chatSendMessage:\r\n            if (\r\n                state.userSelected?._id === action.payload.from._id ||\r\n                state.userSelected?._id === action.payload.to._id\r\n            ) {\r\n                return {\r\n                    ...state, messages: [...state.messages, action.payload]\r\n                }\r\n            }\r\n            return state\r\n        case types.chatLoad:\r\n            return { ...state, messages: action.payload }\r\n\r\n        case types.authLogout:\r\n            return initialState\r\n\r\n        case types.chatlist:\r\n            return { ...state, chats: action.payload }\r\n\r\n        case types.chatTyping:\r\n            return { ...state, chats: state.chats.map(ch => ch._id === action.payload ? { ...ch, typing: true } : ch) }\r\n        case types.chatNotTyping:\r\n            return { ...state, chats: state.chats.map(ch => ch._id === action.payload ? { ...ch, typing: false } : ch) }\r\n        default: return state;\r\n    }\r\n\r\n}","import { combineReducers } from 'redux'\r\nimport { chatReducer } from './chatReducer'\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    chat: chatReducer\r\n})","import { applyMiddleware, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from \"../reducers/rootReducer\";\r\n\r\n\r\n\r\nconst composeEnhancers =\r\n    (typeof window !== \"undefined\" &&\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\r\n    compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);\r\n","\nimport './App.css';\nimport AppRouter from './routers/AppRouter';\nimport { mode } from \"@chakra-ui/theme-tools\";\nimport React from 'react';\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\"\nimport AuthProvider from './contexts/AuthContext';\nimport { SocketProvider } from './contexts/SocketContext';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nconst styles = {\n  global: (props) => ({\n    body: {\n      fontFamily: \"body\",\n      color: mode(\"gray.900\", \"gray.300\")(props),\n      bg: mode(\"white.50\", \"gray.900\")(props),\n      lineHeight: \"base\",\n    },\n    \"*::placeholder\": {\n      color: mode(\"gray.400\", \"whiteAlpha.500\")(props),\n    },\n    \"*, *::before, &::after\": {\n      borderColor: mode(\"gray.200\", \"whiteAlpha.300\")(props),\n      wordWrap: \"break-word\",\n    },\n  }),\n};\n\nconst theme = extendTheme({\n  styles,\n});\n\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <AuthProvider>\n        <Provider store={store}>\n          <SocketProvider>\n            <AppRouter />\n          </SocketProvider>\n        </Provider>\n      </AuthProvider>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}