{"version":3,"sources":["helpers/axios.js","contexts/AuthContext.js","utils/Loading.js","components/forms/InputText.js","components/forms/InputPassword.js","validators/validator.js","components/auth/Login.js","components/forms/InputSelect.js","components/auth/Signup.js","pages/AuthPage.js","routers/AuthRouter.js","components/forms/UserAvatar.js","variables/iconos.js","helpers/dateFormat.js","helpers/avatarUrl.js","components/chat/Chat.js","components/chat/ChatContainer.js","variables/types.js","actions/chat.js","helpers/scroll.js","hooks/useSocket.js","contexts/SocketContext.js","components/chat/ControlChat.js","components/chat/NavbarChat.js","components/chat/MainChat.js","components/chat/ChatItem.js","components/chat/UsersActive.js","components/chat/Search.js","components/chat/SidebarChat.js","pages/ChatPage.js","components/chat/SidebarMenu.js","pages/ProfilePage.js","routers/ChatRouter.js","routers/AppRouter.js","reducers/chatReducer.js","reducers/rootReducer.js","store/store.js","App.js","index.js"],"names":["Token","localStorage","getItem","axs","axios","create","baseURL","defaults","headers","common","interceptors","response","use","error","status","removeItem","Promise","reject","AuthContext","createContext","initial","token","user","cheking","AuthProvider","children","useState","auth","setAuth","checkToken","useCallback","method","url","then","res","data","setItem","catch","err","console","log","Provider","value","LoadingUser","w","align","boxShadow","my","p","size","me","mt","noOfLines","spacing","flex","Loading","h","gap","direction","bg","useColorModeValue","justify","height","rounded","overflow","InputText","errors","touched","isRequired","label","help","rests","rest","isInvalid","Array","map","key","InputPassword","show","setShow","type","checked","onChange","e","target","loginValidator","yup","shape","username","required","password","singupValidator","min","password2","oneOf","firstName","lastName","email","gender","Login","useContext","formik","useFormik","initialValues","remember","onSubmit","setErrors","validationSchema","as","handleSubmit","mb","variant","placeholder","_focus","autoComplete","getFieldProps","display","alignItems","htmlFor","defaultChecked","fontFamily","bgGradient","color","_hover","disabled","isValid","to","shadow","outline","InputSelect","options","name","Signup","base","lg","Object","keys","length","AuthPage","path","useLocation","pathname","Flex","maxW","minH","justifyContent","flexDir","md","src","alt","m","AuthRouter","element","UserAvatar","online","mx","pos","border","_after","content","bottom","right","library","add","faCode","faCommentDots","faHighlighter","faMoon","faLightbulb","faPaperPlane","faClock","faUser","moment","locale","dateFormat","date","format","disconnectedIn","startOf","fromNow","getAvatar","trim","toLowerCase","hash","md5","Chat","message","bgChat","ms","from","picture","borderLeftColor","borderTopColor","borderRightColor","borderBlockColor","left","fontSize","textAlign","icon","createdAt","ChatContainer","messages","useSelector","state","chat","className","id","_id","types","startChatActivate","payload","startLoadMessage","scrollBottom","containerId","duration","animateScroll","scrollToBottom","useSocket","serverPath","socket","setSocket","setOnline","dispatch","useDispatch","connectSocket","socketTem","io","connect","transports","forceNew","query","disconnectSocket","disconnect","useEffect","connected","on","users","startListUsers","startSendMessage","startChatTyping","startNotChatTyping","SocketContext","SocketProvider","process","ControlChat","setmessage","userSelected","preventDefault","emit","onFocus","onBlur","NavbarChat","py","whiteSpace","textOverflow","fontWeight","lastLogin","MainChat","ChatItem","setShowChat","active","useMediaQuery","isMd","px","backgroundColor","cursor","onClick","sendMe","typing","UsersActive","SearchItem","setUsers","bgActive","avatar","Search","handleChange","a","keyword","position","zIndex","SidebarChat","chats","bgSidebar","useBreakpointValue","templateColumns","filter","ChatNoSelected","sm","lineHeight","bgClip","ChatPage","showChat","SidebarMenu","useColorMode","colorMode","toggleColorMode","placement","command","ProfilePage","btnOption","setBtnOption","bgProfile","bgImage","borderRadius","bgPosition","bgRepeat","backgroundSize","backdropFilter","borderColor","maxWidth","colSpan","d","ChatRouter","bgMenu","index","PrivateRouter","PublicRouter","AppRouter","hashType","initialState","rootReducer","combineReducers","action","ch","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","styles","global","props","body","mode","wordWrap","theme","extendTheme","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NACMA,EAAQC,aAAaC,QAAQ,SAE7BC,EAAMC,IAAMC,OAAO,CAAEC,QADqB,SAGhDH,EAAII,SAASC,QAAQC,OAArB,cAA+CT,EAE/CG,EAAIO,aAAaC,SAASC,KAAI,SAAAD,GAAQ,OAAIA,KAAU,SAAAE,GAKhD,OAH8B,MAA1BA,EAAMF,SAASG,QACfb,aAAac,WAAW,SAErBC,QAAQC,OAAOJ,MAGXV,Q,OCXFe,EAAcC,0BACrBC,EAAU,CACZC,MAAO,KACPC,KAAM,KACNC,SAAS,GAiCEC,EA9BM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEpB,EAAwBC,mBAASN,GAAjC,mBAAOO,EAAP,KAAaC,EAAb,KAGMC,EAAaC,uBAAY,WAC3BF,EAAQ,2BAAKR,GAAN,IAAeG,SAAS,KAC/BpB,EAAI,CACA4B,OAAQ,OACRC,IAAK,eACNC,MAAK,SAAAC,GACJ,MAAyBA,EAAIC,KAArBb,EAAR,EAAQA,KAAMD,EAAd,EAAcA,MACdpB,aAAamC,QAAQ,QAASf,GAC9BO,EAAQ,CAAEN,OAAMD,QAAOE,SAAS,OACjCc,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAI3B,UAChBV,aAAac,WAAW,SACxBa,EAAQ,2BAAKR,GAAN,IAAeG,SAAS,UAEpC,IAIH,OACI,cAACL,EAAYuB,SAAb,CAAsBC,MAAO,CAAEf,OAAMC,UAASC,cAA9C,SACKJ,K,wBCSPkB,EAAc,WAChB,OACI,eAAC,IAAD,CAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,MAAM,SAASC,UAAU,KAAKC,GAAI,EAAGC,EAAG,EAAvE,UACI,cAAC,IAAD,CAAgBC,KAAK,KAAKC,GAAI,IAC9B,cAAC,IAAD,CAAcC,GAAG,IAAIC,UAAW,EAAGC,QAAQ,IAAIC,KAAK,UAIjDC,EAjDC,WACZ,OACI,eAAC,IAAD,CAAMC,EAAE,QAAQC,IAAI,IAApB,UACI,eAAC,IAAD,CAAMC,UAAU,SAASC,GAAIC,YAAkB,UAAW,YAAaZ,EAAG,EAAGa,QAAQ,gBAAgBL,EAAE,OAAvG,UACI,cAAC,IAAD,CAAUM,OAAO,OAAOlB,EAAE,OAAOmB,QAAQ,OACzC,cAAC,IAAD,CAAUD,OAAO,OAAOlB,EAAE,OAAOmB,QAAQ,OACzC,cAAC,IAAD,CAAUD,OAAO,OAAOlB,EAAE,OAAOmB,QAAQ,UAG7C,eAAC,IAAD,CAAKJ,GAAIC,YAAkB,WAAY,YAAaZ,EAAG,EAAGgB,SAAS,SAAnE,UACI,cAAE,EAAF,IACA,cAAE,EAAF,IACA,cAAE,EAAF,IACA,cAAE,EAAF,IACA,cAAE,EAAF,IACA,cAAE,EAAF,IACA,cAAE,EAAF,IACA,cAAE,EAAF,IACA,cAAE,EAAF,IACA,cAAE,EAAF,IACA,cAAE,EAAF,OAGJ,cAAC,IAAD,CAAKL,GAAIC,YAAkB,UAAW,YAAaN,KAAM,EAAzD,SACI,eAAC,IAAD,CAAMT,MAAM,SAASgB,QAAQ,gBAA7B,UACI,eAAC,IAAD,CAAMf,UAAU,KAAKD,MAAM,SAASE,GAAI,EAAGC,EAAG,EAA9C,UACI,cAAC,IAAD,CAAgBC,KAAK,KAAKC,GAAI,IAC9B,cAAC,IAAD,CAAcC,GAAG,IAAIC,UAAW,EAAGC,QAAQ,IAAIC,KAAK,SAGxD,eAAC,IAAD,WACI,cAAC,IAAD,CAAUQ,OAAO,OAAOlB,EAAE,OAAOmB,QAAQ,OACzC,cAAC,IAAD,CAAUD,OAAO,OAAOlB,EAAE,OAAOmB,QAAQ,mB,uGCLlDE,EA1BG,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,OAAQC,EAAyD,EAAzDA,QAAyD,IAAhDC,kBAAgD,SAA5BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAASC,EAAY,iBAC1E7B,EAAmB6B,EAAnB7B,MAAU8B,EAAlB,YAA2BD,EAA3B,GACA,OACI,eAAC,IAAD,CAAaE,UAAWP,GAAUC,EAASC,WAAYA,EAAvD,UACI,cAAC,IAAD,UAAYC,IAEZ,cAAC,IAAD,2BACQG,GADR,IAEI9B,MAAOA,GAAS,MAGnBwB,GAAUC,EACP,cAAC,IAAD,UACI,cAAC,IAAD,UAEQD,aAAkBQ,MAASR,EAAOS,KAAI,SAAC9D,EAAO+D,GAAR,OAAiB,cAAC,IAAD,UAAqB/D,GAAN+D,MAA8B,cAAC,IAAD,UAAWV,QAK3H,cAAC,IAAD,UAAiBI,Q,gFCoBlBO,EAvCO,SAAC,GAAoE,IAAlEX,EAAiE,EAAjEA,OAAQC,EAAyD,EAAzDA,QAAyD,IAAhDC,kBAAgD,SAA5BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAASC,EAAY,iBACxF,EAAwB7C,oBAAS,GAAjC,mBAAOoD,EAAP,KAAaC,EAAb,KACQrC,EAAmB6B,EAAnB7B,MAAU8B,EAAlB,YAA2BD,EAA3B,GACA,OACE,eAAC,IAAD,CAAaE,UAAWP,GAAUC,EAASC,WAAYA,EAAvD,UACE,cAAC,IAAD,UAAYC,IACZ,eAAC,IAAD,WAEE,cAAC,IAAD,aACEW,KAAMF,EAAO,OAAS,WACtBpC,MAAOA,GAAS,IACZ8B,IAGN,cAAC,IAAD,UACE,cAAC,IAAD,CACEvB,KAAK,KACLgC,QAASH,EACTI,SAAU,SAACC,GAAD,OAAOJ,EAAQI,EAAEC,OAAOH,iBAMvCf,GAAUC,EACT,cAAC,IAAD,UACE,cAAC,IAAD,UAEID,aAAkBQ,MAASR,EAAOS,KAAI,SAAC9D,EAAO+D,GAAR,OAAiB,cAAC,IAAD,UAAqB/D,GAAN+D,MAA8B,cAAC,IAAD,UAAWV,QAKrH,cAAC,IAAD,UAAiBI,Q,QCrCZe,EAAiBC,MAAaC,MAAM,CAC7CC,SAAUF,MAAaG,SAAS,8BAChCC,SAAUJ,MAAaG,SAAS,gCAIvBE,EAAkBL,MAAaC,MAAM,CAC9CC,SAAUF,MAAaG,SAAS,8BAChCC,SAAUJ,MAAaG,SAAS,8BAA8BG,IAAI,EAAG,wDACrEC,UAAWP,MAAaG,SAAS,8BAA8BG,IAAI,EAAG,wDAAqDE,MAAM,CAACR,IAAQ,YAAa,MAAO,mCAC9JS,UAAWT,MAAaG,SAAS,0BACjCO,SAAUV,MAAaG,SAAS,4BAChCQ,MAAOX,MAAaG,SAAS,yBAAyBQ,MAAM,4BAC5DC,OAAQZ,MAAaG,SAAS,4BC8GnBU,EA9GD,WAEV,IAAQvE,EAAYwE,qBAAWlF,GAAvBU,QA4BFyE,EAASC,YAAU,CACrBC,cACA,CACIC,UAAU,EACVhB,SAAUvF,aAAaC,QAAQ,aAEnCuG,SAZiB,SAACtE,GAClB,IApBWqD,EAAUE,EAoBJvD,EAAKqE,SACXvG,aAAamC,QAAQ,WAAYD,EAAKqD,UAAYvF,aAAac,WAAW,YArB1EyE,EAsBLrD,EAAKqD,SAtBUE,EAsBAvD,EAAKuD,SApB1BvF,EAAI,CACA4B,OAAQ,OACRC,IAAK,aACLG,KAAM,CAAEqD,WAAUE,cACnBzD,MAAK,SAACC,GACLK,QAAQC,IAAIN,GACZ,MAAwBA,EAAIC,KAApBb,EAAR,EAAQA,KAAMD,EAAd,EAAcA,MACdpB,aAAamC,QAAQ,QAASf,GAC9BO,EAAQ,CAAEN,OAAMD,QAAOE,SAAS,OAEjCc,OAAM,SAACC,GAAS,IAAD,GACd,UAAIA,EAAI3B,gBAAR,aAAI,EAAcwB,OACdkE,EAAOK,UAAUpE,EAAI3B,SAASwB,UAkBtCwE,iBAAkBtB,IAItB,OACI,eAAC,IAAD,CAAKuB,GAAI,OAAQzD,GAAI,GAAIsD,SAAUJ,EAAOQ,aAA1C,UACI,cAAC,IAAD,CAASC,GAAG,IAAZ,mBACA,eAAC,IAAD,CAAOzD,QAAS,EAAhB,UACI,cAAC,EAAD,aACIa,OAAQmC,EAAOnC,OAAOsB,SACtBrB,QAASkC,EAAOlC,QAAQqB,SACxBpB,YAAY,EACZC,MAAM,WACNC,KAAK,+BACLU,KAAK,OACL+B,QAAQ,SACRC,YAAY,UACZC,OAAQ,CAAEtD,GAAIC,YAAkB,MAAO,aACvCsD,aAAa,QACTb,EAAOc,cAAc,cAG7B,cAAC,EAAD,aACIjD,OAAQmC,EAAOnC,OAAOwB,SACtBvB,QAASkC,EAAOlC,QAAQuB,SACxBtB,YAAY,EACZC,MAAM,WACNC,KAAK,2BACLyC,QAAQ,SACRC,YAAY,gBACZC,OAAQ,CAAEtD,GAAIC,YAAkB,MAAO,aACvCsD,aAAa,QACTb,EAAOc,cAAc,cAG7B,eAAC,IAAD,CAAaC,QAAQ,OAAOC,WAAW,SAAvC,UACI,cAAC,IAAD,CAAWC,QAAQ,eAAeR,GAAG,IAArC,oCAGA,cAAC,IAAD,2BAAYT,EAAOc,cAAc,aAAjC,IAA8CI,gBAAc,WAIpE,cAAC,IAAD,CACIvC,KAAK,SACLwC,WAAY,UACZrE,GAAI,EACJP,EAAG,OACH6E,WAAW,iCACXC,MAAO,QACPC,OAAQ,CACJF,WAAY,iCACZ3E,UAAW,MAEf8E,UAAUvB,EAAOwB,QAXrB,+BAgBA,cAAC,IAAD,CAAMC,GAAG,eAAT,SACI,cAAC,IAAD,CACIlF,EAAE,OACFmE,QAAQ,OACRgB,OAAO,OACPd,OAAQ,CAAEe,QAAS,QAJvB,gC,sEChFDC,EA3BK,SAAC,GAAiF,IAA/E/D,EAA8E,EAA9EA,OAAQC,EAAsE,EAAtEA,QAAsE,IAA7DC,kBAA6D,SAAzCC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,KAAkC,IAA5B4D,eAA4B,MAAlB,GAAkB,EAAX1D,EAAW,iBACjG,OACI,eAAC,IAAD,CAAaC,UAAWP,GAAUC,EAASC,WAAYA,EAAvD,UACI,cAAC,IAAD,UAAYC,IAEZ,cAAC,IAAD,2BAAYG,GAAZ,aACK0D,EAAQvD,KAAI,SAAAjC,GAAK,OACd,wBAAQA,MAAOA,EAAMA,MAArB,SAA+CA,EAAMyF,MAApBzF,EAAMA,aAK9CwB,GAAUC,EACP,cAAC,IAAD,UACI,cAAC,IAAD,UAEQD,aAAkBQ,MAASR,EAAOS,KAAI,SAAC9D,EAAO+D,GAAR,OAAiB,cAAC,IAAD,UAAqB/D,GAAN+D,MAA8B,cAAC,IAAD,UAAWV,QAK3H,cAAC,IAAD,UAAiBI,QCuJlB8D,EApKA,WAEX,IAAQxG,EAAYwE,qBAAWlF,GAAvBU,QAgBFyE,EAASC,YAAU,CACrBC,cAAe,GACfE,SAjBiB,SAACtE,GAClBhC,EAAI,CACA4B,OAAQ,OACRC,IAAK,eACLG,SACDF,MAAK,SAAAC,GACJK,QAAQC,IAAIN,GACZ,MAAwBA,EAAIC,KAApBb,EAAR,EAAQA,KAAMD,EAAd,EAAcA,MACdpB,aAAamC,QAAQ,QAASf,GAC9BO,EAAQ,CAAEN,OAAMD,aACjBgB,OAAM,SAAAC,GACL+D,EAAOK,UAAUpE,EAAI3B,SAASwB,UAOlCwE,iBAAkBhB,IAGtB,OACI,eAAC,IAAD,CAAOtC,QAAS,EAAGuD,GAAG,OAAOH,SAAUJ,EAAOQ,aAA9C,UACI,cAAC,IAAD,CAASC,GAAG,IAAZ,oBACA,cAAC,EAAD,aACI5C,OAAQmC,EAAOnC,OAAOsB,SACtBrB,QAASkC,EAAOlC,QAAQqB,SACxBpB,YAAY,EACZC,MAAM,WACNC,KAAK,+BACLU,KAAK,OACL+B,QAAQ,SACRC,YAAY,UACZC,OAAQ,CAAEtD,GAAIC,YAAkB,MAAO,aACvCsD,aAAa,QACTb,EAAOc,cAAc,cAG7B,eAAC,IAAD,CAAOzD,UAAW,CAAE2E,KAAM,SAAUC,GAAI,OAAxC,UACI,cAAC,EAAD,aACIpE,OAAQmC,EAAOnC,OAAOwB,SACtBvB,QAASkC,EAAOlC,QAAQuB,SACxBtB,YAAY,EACZC,MAAM,WACNC,KAAK,2BACLyC,QAAQ,SACRC,YAAY,gBACZC,OAAQ,CAAEtD,GAAIC,YAAkB,MAAO,aACvCsD,aAAa,QACTb,EAAOc,cAAc,cAG7B,cAAC,EAAD,aACIjD,OAAQmC,EAAOnC,OAAO2B,UACtB1B,QAASkC,EAAOlC,QAAQ0B,UACxBzB,YAAY,EACZC,MAAM,0BACNC,KAAK,0BACLyC,QAAQ,SACRC,YAAY,gBACZC,OAAQ,CAAEtD,GAAIC,YAAkB,MAAO,aACvCsD,aAAa,QACTb,EAAOc,cAAc,kBAGjC,eAAC,IAAD,CAAOzD,UAAW,CAAE2E,KAAM,SAAUC,GAAI,OAAxC,UACI,cAAC,EAAD,aACIpE,OAAQmC,EAAOnC,OAAO6B,UACtB5B,QAASkC,EAAOlC,QAAQ4B,UACxB3B,YAAY,EACZC,MAAM,UACNC,KAAK,qBACLU,KAAK,OACL+B,QAAQ,SACRC,YAAY,UACZC,OAAQ,CAAEtD,GAAIC,YAAkB,MAAO,aACvCsD,aAAa,QACTb,EAAOc,cAAc,eAE7B,cAAC,EAAD,aACIjD,OAAQmC,EAAOnC,OAAO8B,SACtB7B,QAASkC,EAAOlC,QAAQ6B,SACxB5B,YAAY,EACZC,MAAM,aACNC,KAAK,uBACLU,KAAK,OACL+B,QAAQ,SACRC,YAAY,aACZC,OAAQ,CAAEtD,GAAIC,YAAkB,MAAO,aACvCsD,aAAa,QACTb,EAAOc,cAAc,iBAKjC,eAAC,IAAD,CAAOzD,UAAW,CAAE2E,KAAM,SAAUC,GAAI,OAAxC,UACI,cAAC,EAAD,aACIpE,OAAQmC,EAAOnC,OAAO+B,MACtB9B,QAASkC,EAAOlC,QAAQ8B,MACxB7B,YAAY,EACZC,MAAM,QACNC,KAAK,oBACLU,KAAK,QACL+B,QAAQ,SACRC,YAAY,QACZC,OAAQ,CAAEtD,GAAIC,YAAkB,MAAO,aACvCsD,aAAa,QACTb,EAAOc,cAAc,WAG7B,cAAC,EAAD,yBACIjD,OAAQmC,EAAOnC,OAAOgC,OACtB/B,QAASkC,EAAOlC,QAAQ+B,OACxB9B,YAAY,EACZC,MAAM,YACNC,KAAK,uBACL0C,YAAY,6BACZD,QAAQ,SACRpD,GAAIC,YAAkB,UAAW,YACjCqD,OAAQ,CAAEtD,GAAIC,YAAkB,MAAO,aACvCsD,aAAa,QACTb,EAAOc,cAAc,WAX7B,IAYIe,QAAS,CACL,CAAExF,MAAO,YAAayF,KAAM,aAC5B,CAAEzF,MAAO,WAAYyF,KAAM,YAC3B,CAAEzF,MAAO,OAAQyF,KAAM,eAKnC,cAAC,IAAD,CACIX,WAAY,UACZxC,KAAK,SACL7B,GAAI,EACJP,EAAG,OACH6E,WAAW,iCACXC,MAAO,QACPC,OAAQ,CACJF,WAAY,iCACZ3E,UAAW,MAEf8E,UAAUvB,EAAOwB,SAAkD,IAAvCU,OAAOC,KAAKnC,EAAOlC,SAASsE,OAX5D,0BAgBA,cAAC,IAAD,CAAMX,GAAG,cAAT,SACI,cAAC,IAAD,CACIlF,EAAE,OACFmE,QAAQ,OACRgB,OAAO,OACPd,OAAQ,CAAEe,QAAS,QAJvB,yBC9HDU,EA3BE,WACb,IAAMC,EAAOC,cAAcC,SAC3B,OACI,eAAC,IAAD,CACIjC,GAAIkC,IACJC,KAAM,MACNC,KAAK,QACLnG,MAAM,SACNoG,eAAe,SACfC,QAAS,CAAEb,KAAM,iBAAkBc,GAAI,OAN3C,UASI,cAAC,IAAD,CAAO7F,KAAK,IAAZ,SACI,cAAC,IAAD,CAAO8F,IAAI,kFAAkFC,IAAI,oBAGrG,cAAC,IAAD,CAAO/F,KAAK,IAAIgG,EAAG,EAAnB,SAEI,cAAC,IAAD,CAAK3F,GAAIC,YAAkB,UAAW,YAAaZ,EAAE,KAAKe,QAAQ,MAAMjB,UAAU,KAAlF,SAEc,gBAAT6F,EAAyB,cAAC,EAAD,IAAY,cAAC,EAAD,YCjB3CY,EATI,WACf,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOZ,KAAK,SAASa,QAAS,cAAC,EAAD,MAC9B,cAAC,IAAD,CAAOb,KAAK,UAAUa,QAAS,cAAC,EAAD,U,kDCoB5BC,EAzBI,SAAC,GAAkD,IAAD,IAA/CxG,YAA+C,MAAxC,KAAwC,EAAlCmG,EAAkC,EAAlCA,IAAkC,IAA7BM,cAA6B,SAAXlF,EAAW,iBACjE,OACI,cAAC,IAAD,2BACQA,GADR,IAEIvB,KAAMA,EACNmG,IAAKA,EACLC,IAAK,SACLM,GAAI,EACJC,IAAK,WACLC,OAAO,kBACPC,OAAQ,CACJC,QAAS,KACTnH,EAAG,EACHY,EAAG,EACHG,GAAI+F,EAAS,YAAc,UAC3BG,OAAQ,kBACR9F,QAAS,OACT6F,IAAK,WACLI,OAAQ,EACRC,MAAO,O,uBCXvBC,EAAQC,IACJC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KAASC,M,+BChBbC,KAAOC,OAAO,MAEP,IAAMC,GAAa,SAACC,GACvB,OAAOH,KAAOG,GAAMC,OAAO,SAIlBC,GAAiB,SAACF,GAC3B,OAAOH,KAAOG,GAAMG,QAAQ,OAAOC,SAAQ,I,qBCChCC,GATG,WAAiB,IAAhBnF,EAAe,uDAAP,GAGvBA,GADAA,EAAQA,EAAMoF,QACAC,cACd,IAAMC,EAAOC,KAAIvF,GACXjE,EAAG,0CAAsCuJ,EAAtC,0BACT,OAAOvJ,GC4CIyJ,GA5CF,SAAC,GAA6B,IAAD,QAA1BvI,UAA0B,SAAdwI,EAAc,EAAdA,QAClBC,EAAS/H,YAAkBV,EAAK,WAAa,WAAYA,EAAK,WAAa,YACjF,OACI,eAAC,IAAD,CAAM6F,KAAM,CAAEV,KAAM,MAAOC,GAAI,OAAS1F,EAAE,cAAcC,MAAM,MAAM+I,GAAI1I,EAAK,OAAS,IAAKH,GAAG,IAA9F,WACMG,GAAM,cAAC,EAAD,CAAYD,KAAK,KAAKmG,IAAG,UAAEsC,EAAQG,KAAKC,eAAf,QAA0BV,GAAUM,EAAQG,KAAK5F,SAElF,eAAC,IAAD,CACItC,GAAIgI,EACJ7I,UAAW,KACXE,EAAG,EACHe,QAAS,KACT6F,IAAK,WACLE,OAAQ,CACJC,QAAQ,KACRnH,EAAG,EACHY,EAAG,EACHqG,OAAQ,yBACRkC,gBAAiB7I,EAAK,cAAgByI,EACtCK,eAAgB9I,EAAK,cAAgByI,EAErCM,iBAAkB/I,EAAKyI,EAAS,cAChCO,iBAAkBhJ,EAAKyI,EAAS,cAEhC/B,IAAK,WACLI,OAAQ,QACRmC,KAAMjJ,EAAK,UAAY,IACvB+G,MAAO/G,EAAK,IAAM,WApB1B,UAsBI,cAAC,IAAD,CAEIwE,MAAO9D,YAAkB,WAAY,YACrCwI,SAAU,KAHd,SAIKV,EAAQ3B,UAEb,eAAC,IAAD,CAAMqC,SAAS,QAAQC,UAAWnJ,EAAK,OAAS,QAAhD,UAAyD,cAAC,IAAD,CAAiBoJ,KAAM,CAAC,KAAM,WAAvF,IAAqGxB,GAAWY,EAAQa,iBAG3HrJ,GAAM,cAAC,EAAD,CAAYD,KAAK,KAAKmG,IAAG,UAAEsC,EAAQG,KAAKC,eAAf,QAA0BV,GAAUM,EAAQG,KAAK5F,aCtB9EuG,GAjBO,WAElB,IAAMC,EAAWC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,YACzC9K,EAASyE,qBAAWlF,GAApBS,KAER,OACI,cAAC,IAAD,CAAK6B,EAAE,OAAOR,EAAE,IAAI6J,UAAU,SAASC,GAAG,gBAA1C,SAEQL,EAAS9H,KAAI,SAAA+G,GAAO,OAChB,cAAC,GAAD,CAAMxI,GAAIvB,EAAKL,KAAKyL,MAAQrB,EAAQG,KAAKkB,IAAKrB,QAASA,GAAcA,EAAQqB,W,UCfpFC,GAEM,kBAFNA,GAGK,gBAHLA,GAIQ,oBAJRA,GAKC,YALDA,GAOG,eAPHA,GASC,aATDA,GAUG,cAVHA,GAWM,kBCFNC,GAAoB,SAAC3L,GAAD,MAAW,CACxC0D,KAAMgI,GACNE,QAAS5L,IASA6L,GAAmB,SAACV,GAAD,MAAe,CAC3CzH,KAAMgI,GACNE,QAAST,I,UCnBAW,GAAe,SAACC,GAA+B,IAAlBC,EAAiB,uDAAN,EACjDC,iBAAcC,eAAe,CAAEH,cAAaC,cCGnCG,GAAY,SAACC,GAItB,MAA4BhM,mBAAS,MAArC,mBAAOiM,EAAP,KAAeC,EAAf,KACA,EAA4BlM,oBAAS,GAArC,mBAAOgI,EAAP,KAAemE,EAAf,KACMC,EAAWC,cAEXC,EAAgBlM,uBAAY,SAACT,GAC/B,IAAM4M,EAAYC,KAAGC,QAAQT,EACzB,CACIU,WAAY,CAAC,aACbC,UAAU,EACVC,MAAO,CAAEjN,WAGjBuM,EAAUK,KACX,CAACP,IAEEa,EAAmBzM,uBAAY,WAC3B,OAAN6L,QAAM,IAANA,KAAQa,eACT,CAACb,IAiDJ,OA9CAc,qBAAU,WACNZ,EAAS,OAACF,QAAD,IAACA,OAAD,EAACA,EAAQe,aACnB,CAACf,IAEJc,qBAAU,WACA,OAANd,QAAM,IAANA,KAAQgB,GAAG,WAAW,kBAAMd,GAAU,QACvC,CAACF,IAEJc,qBAAU,WACA,OAANd,QAAM,IAANA,KAAQgB,GAAG,cAAc,kBAAMd,GAAU,QAC1C,CAACF,IAEJc,qBAAU,WAEA,OAANd,QAAM,IAANA,KAAQgB,GAAG,cAAc,SAACC,GACtBd,EF3CkB,SAACc,GAAD,MAAY,CACtC5J,KAAMgI,GACNE,QAAS0B,GEyCQC,CAAeD,SAE7B,CAACjB,EAAQG,IACZW,qBAAU,WAEA,OAANd,QAAM,IAANA,KAAQgB,GAAG,iBAAiB,SAAClC,GACzBqB,EFvB8B,CACtC9I,KAAMgI,GAAgBE,QEsBUT,SAE7B,CAACkB,EAAQG,IAEZW,qBAAU,WAEA,OAANd,QAAM,IAANA,KAAQgB,GAAG,mBAAmB,SAACjD,GAC3BoC,EF7CoB,SAACpC,GAAD,MAAc,CAC1C1G,KAAMgI,GACNE,QAASxB,GE2CQoD,CAAiBpD,IAC1B0B,GAAa,gBAAiB,QAEnC,CAACO,EAAQG,IAGZW,qBAAU,WACA,OAANd,QAAM,IAANA,KAAQgB,GAAG,UAAU,SAAC7B,GAClBgB,EFlCmB,SAAChB,GAAD,MAAS,CACpC9H,KAAMgI,GAAkBE,QAASJ,GEiChBiC,CAAgBjC,SAE9B,CAACa,EAAQG,IAEZW,qBAAU,WACA,OAANd,QAAM,IAANA,KAAQgB,GAAG,cAAc,SAAC7B,GACtBgB,EFrCsB,SAAChB,GAAD,MAAS,CACvC9H,KAAMgI,GAAqBE,QAASJ,GEoCnBkC,CAAmBlC,SAEjC,CAACa,EAAQG,IAEL,CACHH,SACAjE,SACAsE,gBACAO,qBC3EKU,GAAgB9N,0BAGhB+N,GAAiB,SAAC,GAAkB,IAAhBzN,EAAe,EAAfA,SAE7B,EAA4DgM,GAAU0B,IAA9DxB,EAAR,EAAQA,OAAQjE,EAAhB,EAAgBA,OAAQsE,EAAxB,EAAwBA,cAAeO,EAAvC,EAAuCA,iBAE/B5M,EAASyE,qBAAWlF,GAApBS,KAgBR,OAdA8M,qBAAU,WACF9M,EAAKN,OACL2M,EAAcrM,EAAKN,SAExB,CAACM,EAAKN,MAAO2M,IAGhBS,qBAAU,WACD9M,EAAKN,OACNkN,MAEL,CAAC5M,EAAKN,MAAOkN,IAIZ,cAACU,GAAcxM,SAAf,CAAwBC,MAAO,CAAEiL,SAAQjE,UAAzC,SACKjI,KCmCE2N,GAxDK,WAEhB,MAA8B1N,mBAAS,IAAvC,mBAAOgK,EAAP,KAAgB2D,EAAhB,KACQ1B,EAAWvH,qBAAW6I,IAAtBtB,OACAhM,EAASyE,qBAAWlF,GAApBS,KACF2N,EAAe5C,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAK0C,gBAwBrD,OACI,eAAC,IAAD,CACI9L,EAAG,GACH6D,WAAY,SACZ4B,eAAgB,gBAChBjG,EAAG,EACH4D,GAAG,OACHH,SA7Ba,SAACtB,GAClBA,EAAEoK,iBAC4B,IAA1B7D,EAAQL,OAAO5C,SAEfkF,EAAO6B,KAAK,eAAgB,CACxB3D,KAAMlK,EAAKL,KAAKyL,IAChBjF,GAAIwH,EAAavC,IACjBhD,QAAS2B,IAEb2D,EAAW,MAcf,UASI,cAAC,IAAD,CAAOrK,KAAK,OAAOtC,MAAOgJ,EAAS1E,YAAY,iBAAiBD,QAAQ,SACpE7B,SAAU,SAACC,GACPkK,EAAWlK,EAAEC,OAAO1C,QAExB+M,QAvBO,WACflN,QAAQC,IAAI,UACZmL,EAAO6B,KAAK,SAAU,CAAE3D,KAAMlK,EAAKL,KAAKyL,IAAKjF,GAAIwH,EAAavC,OAsBtD2C,OAnBU,WAClBnN,QAAQC,IAAI,aACZmL,EAAO6B,KAAK,aAAc,CAAE3D,KAAMlK,EAAKL,KAAKyL,IAAKjF,GAAIwH,EAAavC,SAoB9D,cAAC,IAAD,CAAOrJ,UAAW,MAAOL,QAAS,EAAGsG,GAAG,IAAxC,SAEI,cAAC,IAAD,CAAQ3E,KAAK,SAAb,SAAuB,cAAC,IAAD,CAAiBsH,KAAM,CAAC,KAAM,yBChBtDqD,GAjCI,WAAO,IAAD,EACfL,EAAe5C,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAK0C,gBACrD,OACI,eAAC,IAAD,CAAKvL,QAAQ,KAAb,UACI,eAAC,IAAD,CAAMsD,WAAY,SAAU4B,eAAgB,gBAAiB2G,GAAI,EAAGjG,GAAG,IAAvE,UACI,eAAC,IAAD,WACI,cAAC,EAAD,CAAYP,IAAG,UAAEkG,EAAaxD,eAAf,QAA0BV,GAAUkE,EAAarJ,OAAQyD,OAAQ4F,EAAa5F,SAC7F,eAAC,IAAD,WACI,eAAC,IAAD,CAAS0C,SAAU,CAAE/D,KAAM,KAAMC,GAAI,MAAQd,WAAY,OAAQqI,WAAW,SAAS7L,SAAS,SAAS8L,aAAa,WAApH,UACKR,EAAavJ,UADlB,IAC8BuJ,EAAatJ,YAE3C,eAAC,IAAD,CAAMtC,UAAW,CAAE2E,KAAM,SAAUC,GAAI,OAAvC,UACI,cAAC,IAAD,CAAMpF,GAAG,IAAI6M,WAAY,IAAKrI,MAAO,WAArC,SACK4H,EAAarJ,QAElB,eAAC,IAAD,CAAMmG,SAAS,QAAQrJ,GAAG,OAA1B,UACI,cAAC,IAAD,CAAiBuJ,KAAM,CAAC,KAAM,WADlC,KACiDxB,GAAWwE,EAAaU,uBAMrF,cAAC,IAAD,CAAM3I,WAAY,SAAlB,SACI,cAAC,IAAD,CAAO3D,UAAW,MAAOL,QAAS,EAAlC,SACI,cAAC,IAAD,WAIZ,cAAC,IAAD,QCtBG4M,GAVE,WACb,OACI,eAAC,IAAD,CAAMvM,UAAU,SAASF,EAAE,OAA3B,UACI,cAAC,GAAD,IACA,cAAC,GAAD,CAAeF,KAAK,MACpB,cAAC,GAAD,QC2DG4M,GAzDE,SAAC,GAA2B,IAAD,EAAxBtD,EAAwB,EAAxBA,KAAMuD,EAAkB,EAAlBA,YAChBrC,EAAWC,cACXuB,EAAe5C,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAK0C,gBAC/Cc,EAASxM,YAAkB,WAAY,YAE7C,EAAeyM,YAAc,qBAAtBC,EAAP,oBAmBA,OAEI,eAAC,IAAD,CACIzM,QAAQ,gBAAgB+L,GAAI,EAAGW,GAAI,EACnC5I,OAAQ,CAAE6I,gBAAiBJ,GAC3BK,OAAO,UAAU1M,QAAQ,KACzB2M,QAxBY,WACXJ,GACDH,GAAY,IAEA,OAAZb,QAAY,IAAZA,OAAA,EAAAA,EAAcvC,OAAQH,EAAKG,MAC3Be,EAASb,GAAkBL,IAE3BzM,EAAI,CACA6B,IAAI,WAAD,OAAa4K,EAAKG,KACrBvM,QAAS,CAAE,cAAiBP,aAAaC,QAAQ,YAClD+B,MAAK,SAACC,GACL4L,EAASX,GAAiBjL,EAAIC,OAC9BiL,GAAa,gBAAiB,MAC/B/K,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAI3B,eAWpBgD,GACIiJ,EAAKG,OAAL,OAAauC,QAAb,IAAaA,OAAb,EAAaA,EAAcvC,KAAMqD,EAAS,UANlD,UASI,eAAC,IAAD,WACI,cAAC,EAAD,CAAY1G,OAAQkD,EAAKlD,OAAQN,IAAG,UAAEwD,EAAKd,eAAP,QAAkBV,GAAUwB,EAAK3G,SACrE,eAAC,IAAD,WACI,cAAC,IAAD,CAAShD,KAAK,KAAd,SAAoB2J,EAAKpH,WACzB,eAAC,IAAD,CAAMkC,MAAO,WAAYmI,WAAW,SAAS7L,SAAS,SAAS8L,aAAa,WAA5E,UACKlD,EAAK+D,OAAS,KAAO,SAAO/D,EAAK7C,iBAK9C,eAAC,IAAD,CAAK8F,WAAW,SAAhB,UACKjD,EAAKlD,OACF,cAAC,IAAD,CAAMhC,MAAM,QAAQ0E,SAAS,KAA7B,sBAEA,cAAC,IAAD,CAAMA,SAAS,KAAf,SAAqBnB,GAAe2B,EAAKoD,aAE7C,cAAC,IAAD,CAAMtI,MAAM,QAAQ0E,SAAS,KAA7B,SAAmCQ,EAAKgE,OAAS,iBAAmB,YCvBrEC,GA/BK,SAAC,GAA2B,IAAD,EAAxBvP,EAAwB,EAAxBA,KAAM6O,EAAkB,EAAlBA,YACnBb,EAAe5C,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAK0C,gBACrD,EAAee,YAAc,qBAAtBC,EAAP,oBACMxC,EAAWC,cAmBjB,OACI,eAAC,IAAD,CAAK0C,OAAO,UAAUC,QAnBN,WACXJ,GACDH,GAAY,IAEA,OAAZb,QAAY,IAAZA,OAAA,EAAAA,EAAcvC,OAAQzL,EAAKyL,MAC3Be,EAASb,GAAkB3L,IAE3BnB,EAAI,CACA6B,IAAI,WAAD,OAAaV,EAAKyL,KACrBvM,QAAS,CAAE,cAAiBP,aAAaC,QAAQ,YAClD+B,MAAK,SAACC,GACL4L,EAASX,GAAiBjL,EAAIC,OAC9BiL,GAAa,gBAAiB,MAC/B/K,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAI3B,eAKxB,UACI,cAAC,EAAD,CAAY+I,OAAQpI,EAAKoI,OAAQN,IAAG,UAAE9H,EAAKwK,eAAP,QAAkBV,GAAU9J,EAAK2E,SACrE,cAAC,IAAD,CAAMyB,MAAM,WAAW2E,UAAU,SAAjC,SAA4C/K,EAAKkE,e,+BC2BvDsL,GAAa,SAAC,GAAqC,IAAD,EAAlCxP,EAAkC,EAAlCA,KAAM6O,EAA4B,EAA5BA,YAAaY,EAAe,EAAfA,SAC/BC,EAAWpN,YAAkB,WAAY,YAC/C,EAAeyM,YAAc,qBAAtBC,EAAP,oBACMxC,EAAWC,cACXuB,EAAe5C,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAK0C,gBAoBrD,OAEI,eAAC,IAAD,CACIzL,QAAQ,gBAAgB+L,GAAI,EAAGW,GAAI,EACnC5I,OAAQ,CAAE6I,gBAAiBQ,GAC3BP,OAAO,UAAU1M,QAAQ,KACzB2M,QAzBY,WACXJ,GACDH,GAAY,IAEA,OAAZb,QAAY,IAAZA,OAAA,EAAAA,EAAcvC,OAAQzL,EAAKyL,MAC3Be,EAASb,GAAkB3L,IAE3BnB,EAAI,CACA6B,IAAI,WAAD,OAAaV,EAAKyL,KACrBvM,QAAS,CAAE,cAAiBP,aAAaC,QAAQ,YAClD+B,MAAK,SAACC,GACL4L,EAASX,GAAiBjL,EAAIC,OAC9BiL,GAAa,gBAAiB,GAC9B2D,EAAS,OACV1O,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAI3B,eAMxB,UAOI,eAAC,IAAD,WACI,cAAC,EAAD,CAAY+I,OAAQpI,EAAKoI,OAAQN,IAAG,UAAE9H,EAAK2P,cAAP,QAAiB7F,GAAU9J,EAAK2E,SACpE,eAAC,IAAD,WACI,cAAC,IAAD,CAAShD,KAAK,KAAd,SAAoB3B,EAAKyE,UAAY,IAAMzE,EAAK0E,WAChD,cAAC,IAAD,CAAM0B,MAAO,WAAYmI,WAAW,SAAS7L,SAAS,SAAS8L,aAAa,WAA5E,SACKxO,EAAK2E,cAKlB,cAAC,IAAD,CAAK4J,WAAW,SAAhB,SACKvO,EAAKoI,OACF,cAAC,IAAD,CAAMhC,MAAM,QAAZ,sBAEA,cAAC,IAAD,UAAOuD,GAAe3J,EAAK0O,mBAQhCkB,GAxGA,SAAC,GAAqB,IAAnBf,EAAkB,EAAlBA,YAEd,EAA0BzO,mBAAS,IAAnC,mBAAOkN,EAAP,KAAcmC,EAAd,KAEMI,EAAY,yCAAG,WAAOhM,GAAP,kBAAAiM,EAAA,2DACXC,EAAUlM,EAAEC,OAAO1C,MAAM2I,QADd,0CAMSlL,EAAI,CAClB4B,OAAQ,OACRC,IAAI,qBAAD,OAAuBqP,GAC1B7Q,QAAS,CAAE,cAAiBP,aAAaC,QAAQ,YAT5C,OAMHgC,EANG,OAYT6O,EAAS7O,EAAIC,MAZJ,gDAeTI,QAAQC,IAAI,KAAM7B,UAfT,gCAkBboQ,EAAS,IAlBI,yDAAH,sDAuBlB,OACI,eAAC,IAAD,CAAKO,SAAS,WAAd,UACI,cAAC,IAAD,CAAOtM,KAAK,SAASgC,YAAY,YAAYD,QAAQ,SAAS7B,SAAUiM,IACxE,cAAC,IAAD,CACIG,SAAS,WACTC,OAAO,MACP5N,GAAIC,YAAkB,WAAY,YAClChB,EAAE,OACFmB,QAAQ,KACRjB,UAAU,MANd,SASQ8L,EAAMjK,KAAI,SAACrD,GAAD,OACN,cAAC,GAAD,CAA2BA,KAAMA,EAAM6O,YAAaA,EAAaY,SAAUA,GAA1DzP,EAAKyL,cCI/ByE,GA/CK,SAAC,GAAqB,IAAnBrB,EAAkB,EAAlBA,YACXxO,EAASyE,qBAAWlF,GAApBS,KACFiN,EAAQlC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKgC,SACxC6C,EAAQ/E,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAK6E,SACxCC,EAAY9N,YAAkB,UAAW,YACzCmF,EAAO4I,YAAmB,CAAEtJ,KAAM,UAAWC,GAAI,UACvD,OACI,eAAC,IAAD,CACI5E,UAAU,SACVF,EAAE,OACF8N,SAAU,CAAEjJ,KAAM,WAAYc,GAAI,WAClCoI,OAAO,MACPxI,KAAMA,EACN/F,EAAG,EACHW,GAAI+N,EAPR,UASI,eAAC,IAAD,WACI,cAAC,IAAD,CAAS3O,GAAI,EAAGE,KAAK,KAArB,mBACA,cAAC,GAAD,CAAQkN,YAAaA,IACrB,cAAC,IAAD,CAASpN,GAAG,SAGhB,cAAC,IAAD,CAAM6O,gBAAgB,gBAAtB,SAGQhD,EAAMiD,QAAO,SAAAvQ,GAAI,OAAIK,EAAKL,KAAKyL,MAAQzL,EAAKyL,OAAKpI,KAAI,SAAArD,GAAI,OACrD,cAAC,GAAD,CAAaA,KAAMA,EAAqB6O,YAAaA,GAAvB7O,EAAKyL,UAO/C,cAAC,IAAD,CAAS9J,KAAK,KAAK6D,GAAI,EAAvB,uBACA,cAAC,IAAD,CAAKxD,KAAK,IAAIuJ,UAAU,SAAxB,SAEQ4E,EAAM9M,KAAI,SAAAiI,GAAI,OAEV,cAAC,GAAD,CAAUA,KAAMA,EAAqBuD,YAAaA,GAAvBvD,EAAKG,cCblD+E,GAAiB,WACnB,OACI,eAAC,IAAD,CAAMjP,MAAM,SAASgB,QAAQ,SAASL,EAAE,OAAOE,UAAU,SAAzD,UACI,eAAC,IAAD,CACI2I,UAAU,SACV0D,WAAW,YACX3D,SAAU,CAAE/D,KAAM,MAAO0J,GAAI,MAAO5I,GAAI,MAAOb,GAAI,OACnD0J,WAAY,OACZtK,MAAO,YACPuK,OAAO,OACPxK,WAAW,mCAPf,8CASkC,0BAElC,cAAC,IAAD,CAAMb,GAAI,OAAQc,MAAM,WAAW0E,SAAS,KAAKC,UAAU,SAA3D,kDAOG6F,GAjDE,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUhC,EAAkB,EAAlBA,YACpBb,EAAe5C,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAK0C,gBAErD,EAAee,YAAc,qBAAtBC,EAAP,oBAGM3E,EAAS/H,YAAkB,QAAS,YAM1C,OAJA6K,qBAAU,WACN0B,EAAYG,KACb,CAACA,EAAMH,IAIN,qCAEI,cAAC,IAAD,CAAKmB,SAAS,WAAW9N,EAAE,OAA3B,SACK2O,GAAa,cAAC,GAAD,CAAahC,YAAaA,MAE5C,cAAC,IAAD,CAAKxM,GAAIgI,EAAQrI,KAAM,EAAvB,SACKgM,EAAe,cAAC,GAAD,IAAe,cAAC,GAAD,U,kBCoEhC8C,GA7EK,SAAC,GAAqB,IAAD,IAAlBjC,EAAkB,EAAlBA,YACnB,EAA0B/J,qBAAWlF,GAA7BS,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QACd,EAAuCyQ,cAA/BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,gBACbzE,EAAWC,cAOjB,OACI,eAAC,IAAD,CAAMrK,UAAU,SAASb,MAAM,SAASgB,QAAQ,eAAeL,EAAE,OAAjE,UACI,eAAC,IAAD,WACI,cAAC,KAAD,CAASa,MAAM,WAAWmO,UAAU,aAApC,SACI,cAAC,IAAD,CAAM9B,QAAS,WAAQP,GAAY,SAAArL,GAAI,OAAKA,MAASgD,GAAG,IAAxD,SACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAiBwE,KAAM,CAAC,KAAM,wBAI1C,cAAC,KAAD,CAASjI,MAAM,SAASmO,UAAU,aAAlC,SACI,cAAC,IAAD,CAAM1K,GAAG,WAAT,SACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAiBwE,KAAM,CAAC,KAAM,mBAK9C,eAAC,IAAD,WACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAiBA,KAAM,CAAC,KAAM,YAElC,cAAC,IAAD,UACI,cAAC,IAAD,CAAiBA,KAAM,CAAC,KAAM,eAGtC,eAAC,IAAD,WAEI,cAAC,IAAD,CAAQoE,QAAS6B,EAAjB,SACmB,UAAdD,EAAwB,cAAC,IAAD,CAAiBhG,KAAM,CAAC,KAAM,UAAc,cAAC,IAAD,CAAiBA,KAAM,CAAC,KAAM,iBAIvG,eAAC,KAAD,WACI,cAAC,KAAD,UACI,cAAC,EAAD,CAAYrJ,KAAK,KAAKmG,IAAG,UAAEzH,EAAKL,KAAKwK,eAAZ,QAAuBV,GAAUzJ,EAAKL,KAAK2E,WAExE,eAAC,KAAD,CAAUsL,OAAO,OAAO1H,OAAO,IAA/B,UACI,eAAC,IAAD,CAAK7G,EAAE,IAAP,UACI,cAAC,IAAD,CAAKqJ,UAAU,SAAf,SACI,cAAC,EAAD,CAAYpJ,KAAK,MAAMmG,IAAG,UAAEzH,EAAKL,KAAKwK,eAAZ,QAAuBV,GAAUzJ,EAAKL,KAAK2E,WAEzE,eAAC,IAAD,CAAO5C,QAAS,EAAGR,MAAO,SAAUiE,GAAI,EAAxC,UACI,cAAC,IAAD,CAASsF,SAAU,MAAO2D,WAAY,IAAKvI,WAAY,OAAvD,SACK7F,EAAKL,KAAKkE,WAEf,cAAC,IAAD,CAAMkC,MAAO,WAAb,SAA0B/F,EAAKL,KAAK2E,cAG5C,cAAC,IAAD,CAAM6B,GAAG,WAAT,SACI,cAAC,KAAD,CAAU2K,QAAQ,UAAlB,oCAEJ,cAAC,KAAD,CAAUA,QAAQ,UAAlB,wCAGA,cAAC,KAAD,IACA,cAAC,KAAD,CAAUA,QAAQ,UAAK/B,QA9DtB,WACjB5C,EZE0B,CAC9B9I,KAAMgI,KYFF/M,aAAac,WAAW,SACxBa,EAAQ,CAAEN,KAAM,KAAMD,MAAO,KAAME,SAAS,KA2D5B,6CCgGTmR,GA1KK,WAAO,IAAD,EAEtB,EAAkChR,mBAAS,GAA3C,mBAAOiR,EAAP,KAAkBC,EAAlB,KACMC,EAAYjP,YACd,qBACA,4FAEYtC,EAAW8E,qBAAWlF,GAA9BS,KAAQL,KAGhB,OACI,eAAC,IAAD,CAAMoC,UAAU,SAASJ,KAAK,IAAIN,EAAE,IAApC,UACI,eAAC,IAAD,CAAK8D,GAAG,IAAR,UACI,cAAC,IAAD,CACIgM,QAAQ,wCACRlQ,EAAE,OACFY,EAAG,CAAE6E,KAAM,QAASC,GAAI,SACxByK,aAAa,MACbC,WAAW,MACXC,SAAS,YACTC,eAAe,UAInB,eAAC,IAAD,CACIxP,UAAW,CAAE2E,KAAM,SAAUc,GAAI,OACjCvG,EAAE,MACFqG,eAAgB,CAAE8I,GAAI,SAAU5I,GAAI,iBACpCtG,MAAM,SACNsQ,eAAe,4BACfrQ,UAAU,oCACV+G,OAAO,YACPuJ,YAAY,WACZzP,GAAIkP,EACJ7P,EAAE,OACFe,QAAQ,MACRZ,GAAG,QACHwG,GAAG,OAbP,UAgBI,eAAC,IAAD,CACI9G,MAAM,SACNiE,GAAI,CAAEiL,GAAI,OAAQ5I,GAAI,OACtBzF,UAAW,CAAE2E,KAAM,SAAUc,GAAI,OACjCvG,EAAG,CAAEmP,GAAI,QACT1F,UAAW,CAAE0F,GAAI,SAAU5I,GAAI,SALnC,UAOI,cAAC,IAAD,CACIjG,GAAI,CAAEiG,GAAI,QACVC,IAAG,UAAE9H,EAAKwK,eAAP,QAAkBV,GAAU9J,EAAK2E,OACpCrD,EAAE,OACFY,EAAE,OACFuP,aAAa,SAEjB,eAAC,IAAD,CAAMrP,UAAU,SAAS2P,SAAS,OAAOtQ,GAAI,CAAEgP,GAAI,QAAnD,UACI,cAAC,IAAD,CACI3F,SAAU,CAAE2F,GAAI,KAAMzJ,GAAI,MAC1BZ,MAAO,WACPqI,WAAW,OACXnE,GAAI,CAAEmG,GAAI,MAAO5I,GAAI,OAJzB,SAMK7H,EAAKyE,UAAY,IAAMzE,EAAK0E,WAEjC,cAAC,IAAD,CACIoG,SAAU,CAAE2F,GAAI,KAAM5I,GAAI,MAC1BzB,MAAO,WACPqI,WAAW,WAHf,SAKKzO,EAAK2E,cAIlB,eAAC,IAAD,CACIvC,UAAW,CAAE2E,KAAM,SAAUC,GAAI,OACjC1F,EAAG,CAAEmP,GAAI,OAAQ5I,GAAI,MAAOb,GAAI,QAFpC,UAII,eAAC,IAAD,CACI3E,GAAkB,IAAdgP,EAAkB,qBAAuB,cAC7CI,aAAa,OACb9L,OAAQ,CAAEc,OAAQ,QAClB2I,QAAS,WACLkC,EAAa,IAEjBjL,OAAQ,GAPZ,UASI,cAAC,IAAD,CAAiB2E,KAAM,CAAC,KAAM,UAC9B,cAAC,IAAD,CAAMF,SAAS,KAAK2D,WAAW,OAA/B,iCAIJ,eAAC,IAAD,CACIpM,GAAkB,IAAdgP,EAAkB,qBAAuB,cAC7CI,aAAa,OACb9L,OAAQ,CAAEc,OAAQ,QAClB2I,QAAS,WACLkC,EAAa,IAEjBjL,OAAQ,GAPZ,UASI,cAAC,IAAD,CAAiB2E,KAAM,CAAC,KAAM,UAC9B,cAAC,IAAD,CAAMF,SAAS,KAAK2D,WAAW,OAA/B,yCAIJ,eAAC,IAAD,CACIpM,GAAkB,IAAdgP,EAAkB,qBAAuB,cAC7CI,aAAa,OACb9L,OAAQ,CAAEc,OAAQ,QAClB2I,QAAS,WACLkC,EAAa,IAEjBjL,OAAQ,GAPZ,UASI,cAAC,IAAD,CAAiB2E,KAAM,CAAC,KAAM,UAC9B,cAAC,IAAD,CAAMF,SAAS,KAAK2D,WAAW,OAA/B,+BAQhB,eAAC,IAAD,CAAM6B,gBAAgB,iBAAiBnO,IAAI,IAA3C,UACI,cAAC,IAAD,CAAU6P,QAAS,CAAC,GAAI,GAAI,EAAG,GAA/B,SACI,eAAC,IAAD,CAAKxQ,UAAU,KAAKE,EAAG,CAAEqF,KAAM,IAAKC,GAAI,KAAOvE,QAAQ,MAAMJ,GAAIC,YAAkB,QAAS,YAA5F,UACI,cAAC,IAAD,CAAKZ,EAAE,WAAW8D,GAAG,OAArB,SACI,cAAC,IAAD,CAAMsF,SAAS,KAAK2D,WAAW,OAA/B,yBAIJ,cAAC,IAAD,CAAKQ,GAAG,MAAR,SAEI,eAAC,IAAD,CAAMlN,QAAS,EAAf,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAMqE,MAAM,WAAWqI,WAAW,OAAOwD,EAAE,SAA3C,uBADJ,SACiF,cAAC,IAAD,CAAM7L,MAAM,WAAW6L,EAAE,SAAzB,SAAmCjS,EAAKkE,cAEzH,eAAC,IAAD,WACI,cAAC,IAAD,CAAMkC,MAAM,WAAWqI,WAAW,OAAOwD,EAAE,SAA3C,qBADJ,SAC+E,cAAC,IAAD,CAAM7L,MAAM,WAAW6L,EAAE,SAAzB,SAAmCjS,EAAKyE,eAEvH,eAAC,IAAD,WACI,cAAC,IAAD,CAAM2B,MAAM,WAAWqI,WAAW,OAAOwD,EAAE,SAA3C,uBADJ,SACiF,cAAC,IAAD,CAAM7L,MAAM,WAAW6L,EAAE,SAAzB,SAAmCjS,EAAK0E,cAEzH,eAAC,IAAD,WACI,cAAC,IAAD,CAAM0B,MAAM,WAAWqI,WAAW,OAAOwD,EAAE,SAA3C,mBADJ,SAC6E,cAAC,IAAD,CAAM7L,MAAM,WAAW6L,EAAE,SAAzB,SAAmCjS,EAAK2E,WAErH,eAAC,IAAD,WACI,cAAC,IAAD,CAAMyB,MAAM,WAAWqI,WAAW,OAAOwD,EAAE,SAA3C,uBADJ,SAC8E,cAAC,IAAD,CAAM7L,MAAM,WAAW6L,EAAE,SAAzB,SAAmCjS,EAAK4E,YAEtH,eAAC,IAAD,WAEI,cAAC,IAAD,CAAMwB,MAAM,WAAWqI,WAAW,OAAOwD,EAAE,SAA3C,kCAFJ,SAEsF,eAAC,IAAD,CAAM7L,MAAM,WAAW6L,EAAE,SAAzB,cAAoCzI,GAAWxJ,EAAK0O,2BAS1J,cAAC,IAAD,CAAUsD,QAAS,CAAC,GAAI,GAAI,EAAG,GAA/B,SACI,cAAC,IAAD,CAAKxQ,UAAU,KAAf,4BChJL0Q,GAnBI,WACf,IAAMC,EAAS7P,YAAkB,WAAY,YAC7C,EAAgClC,oBAAS,GAAzC,mBAAOyQ,EAAP,KAAiBhC,EAAjB,KACA,OAEI,eAAC,IAAD,CAAM3M,EAAE,QAAQC,IAAI,IAApB,UACI,cAAC,IAAD,CAAKE,GAAI8P,EAAQzQ,EAAG,EAApB,SACI,cAAC,GAAD,CAAamN,YAAaA,MAE9B,eAAC,IAAD,WAEI,cAAC,IAAD,CAAOuD,OAAK,EAAClK,QAAS,cAAC,GAAD,CAAU2I,SAAUA,EAAUhC,YAAaA,MACjE,cAAC,IAAD,CAAOxH,KAAK,WAAWa,QAAS,cAAC,GAAD,aCmC1CmK,GAAgB,SAAC,GAAyB,IAAvBlS,EAAsB,EAAtBA,SACrB,OAD2C,EAAZJ,MAChBI,EAAW,cAAC,IAAD,CAAUqG,GAAG,iBAErC8L,GAAe,SAAC,GAAyB,IAAvBnS,EAAsB,EAAtBA,SACpB,OAD0C,EAAZJ,MACH,cAAC,IAAD,CAAUyG,GAAG,MAAxBrG,GAELoS,GA3CG,WACd,MAA6BzN,qBAAWlF,GAAhCS,EAAR,EAAQA,KAAME,EAAd,EAAcA,WAOd,OAJA4M,qBAAU,WACN5M,MACD,CAACA,IAEAF,EAAKJ,QACE,cAAC,EAAD,IAIP,cAAC,IAAD,CAAYuS,SAAS,UAArB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CACInL,KAAK,KACLa,QACI,cAAC,GAAD,CAAenI,MAAOM,EAAKN,MAA3B,SACI,cAAC,GAAD,QAIZ,cAAC,IAAD,CACIsH,KAAK,SACLa,QACI,cAAC,GAAD,CAAcnI,MAAOM,EAAKN,MAA1B,SACI,cAAC,EAAD,c,6CCzCtB0S,GAAe,CACjBzE,aAAc,KACdV,MAAO,GACP6C,MAAO,GACPhF,SAAU,ICHDuH,GAAcC,aAAgB,CACvCrH,KDMuB,WAAmC,IAAD,MAAjCD,EAAiC,uDAAzBoH,GAAcG,EAAW,uCAEzD,OAAQA,EAAOlP,MAEX,KAAKgI,GACD,OAAO,2BAAKL,GAAZ,IAAmBiC,MAAOsF,EAAOhH,UAErC,KAAKF,GACD,OAAI,UAAAL,EAAM2C,oBAAN,eAAoBvC,OAAQmH,EAAOhH,QAAQH,IACpCJ,EAEJ,2BAAKA,GAAZ,IAAmB2C,aAAc4E,EAAOhH,QAAST,SAAU,KAE/D,KAAKO,GACD,OACI,UAAAL,EAAM2C,oBAAN,eAAoBvC,OAAQmH,EAAOhH,QAAQrB,KAAKkB,MAChD,UAAAJ,EAAM2C,oBAAN,eAAoBvC,OAAQmH,EAAOhH,QAAQpF,GAAGiF,IAEvC,2BACAJ,GADP,IACcF,SAAS,GAAD,oBAAME,EAAMF,UAAZ,CAAsByH,EAAOhH,YAGhDP,EACX,KAAKK,GACD,OAAO,2BAAKL,GAAZ,IAAmBF,SAAUyH,EAAOhH,UAExC,KAAKF,GACD,OAAO+G,GAEX,KAAK/G,GACD,OAAO,2BAAKL,GAAZ,IAAmB8E,MAAOyC,EAAOhH,UAErC,KAAKF,GACD,OAAO,2BAAKL,GAAZ,IAAmB8E,MAAO9E,EAAM8E,MAAM9M,KAAI,SAAAwP,GAAE,OAAIA,EAAGpH,MAAQmH,EAAOhH,QAAlB,2BAAiCiH,GAAjC,IAAqCvD,QAAQ,IAASuD,OAC1G,KAAKnH,GACD,OAAO,2BAAKL,GAAZ,IAAmB8E,MAAO9E,EAAM8E,MAAM9M,KAAI,SAAAwP,GAAE,OAAIA,EAAGpH,MAAQmH,EAAOhH,QAAlB,2BAAiCiH,GAAjC,IAAqCvD,QAAQ,IAAUuD,OAC3G,QAAS,OAAOxH,MEzClByH,GACiB,qBAAXC,QACJA,OAAOC,sCACXC,KAESC,GAAQC,aACjBT,GACAI,GAAiBM,aAAgBC,QCF/BC,GAAS,CACbC,OAAQ,SAACC,GAAD,MAAY,CAClBC,KAAM,CACJvN,WAAY,OACZE,MAAOsN,aAAK,WAAY,WAAjBA,CAA6BF,GACpCnR,GAAIqR,aAAK,WAAY,WAAjBA,CAA6BF,GACjC9C,WAAY,QAEd,iBAAkB,CAChBtK,MAAOsN,aAAK,WAAY,iBAAjBA,CAAmCF,IAE5C,yBAA0B,CACxB1B,YAAa4B,aAAK,WAAY,iBAAjBA,CAAmCF,GAChDG,SAAU,iBAKVC,GAAQC,aAAY,CACxBP,YAkBaQ,OAdf,WACE,OACE,cAAC,KAAD,CAAgBF,MAAOA,GAAvB,SACE,cAAC,EAAD,UACE,cAAC,IAAD,CAAUV,MAAOA,GAAjB,SACE,cAAC,GAAD,UACE,cAAC,GAAD,aCpCZa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8f8a7428.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst Token = localStorage.getItem('token');\r\nconst baseURL = process.env.REACT_APP_API_URL + 'api/'\r\nconst axs = axios.create({ baseURL })\r\n\r\naxs.defaults.headers.common['Authorization'] = Token\r\n\r\naxs.interceptors.response.use(response => response, error => {\r\n\r\n    if (error.response.status === 401) {\r\n        localStorage.removeItem('token')\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default axs;","\r\nimport React, { createContext, useCallback, useState } from \"react\"\r\nimport axs from \"../helpers/axios\"\r\n\r\nexport const AuthContext = createContext()\r\nconst initial = {\r\n    token: null,\r\n    user: null,\r\n    cheking: true\r\n}\r\n\r\nconst AuthProvider = ({ children }) => {\r\n\r\n    const [auth, setAuth] = useState(initial)\r\n\r\n\r\n    const checkToken = useCallback(() => {\r\n        setAuth({ ...initial, cheking: true })\r\n        axs({\r\n            method: \"POST\",\r\n            url: \"auth/renew\",\r\n        }).then(res => {\r\n            const { user, token, } = res.data\r\n            localStorage.setItem('token', token)\r\n            setAuth({ user, token, cheking: false })\r\n        }).catch(err => {\r\n            console.log(err.response);\r\n            localStorage.removeItem('token');\r\n            setAuth({ ...initial, cheking: false })\r\n        })\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ auth, setAuth, checkToken }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthProvider\r\n","import React from 'react'\r\nimport { Flex, Box, HStack } from \"@chakra-ui/layout\";\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\nimport { Skeleton, SkeletonCircle, SkeletonText } from \"@chakra-ui/react\"\r\nconst Loading = () => {\r\n    return (\r\n        <Flex h='100vh' gap='2'>\r\n            <Flex direction='column' bg={useColorModeValue('gray.50', 'gray.700')} p={2} justify='space-between' h='full'>\r\n                <Skeleton height=\"40px\" w='50px' rounded='lg' />\r\n                <Skeleton height=\"40px\" w='50px' rounded='lg' />\r\n                <Skeleton height=\"40px\" w='50px' rounded='lg' />\r\n            </Flex>\r\n\r\n            <Box bg={useColorModeValue('gray.100', 'gray.800')} p={3} overflow='hidden'>\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n                < LoadingUser />\r\n            </Box>\r\n\r\n            <Box bg={useColorModeValue('gray.50', 'gray.900')} flex={1} >\r\n                <Flex align=\"center\" justify=\"space-between\">\r\n                    <Flex boxShadow=\"lg\" align='center' my={2} p={2}>\r\n                        <SkeletonCircle size=\"10\" me={2} />\r\n                        <SkeletonText mt=\"4\" noOfLines={2} spacing=\"4\" flex='1' />\r\n                    </Flex>\r\n\r\n                    <HStack>\r\n                        <Skeleton height=\"40px\" w='50px' rounded='lg' />\r\n                        <Skeleton height=\"40px\" w='50px' rounded='lg' />\r\n                    </HStack>\r\n                </Flex>\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\n\r\nconst LoadingUser = () => {\r\n    return (\r\n        <Flex w={[100, 200, 300, 400]} align='center' boxShadow='lg' my={2} p={2}>\r\n            <SkeletonCircle size=\"10\" me={2} />\r\n            <SkeletonText mt=\"4\" noOfLines={3} spacing=\"4\" flex='1' />\r\n        </Flex>\r\n    )\r\n}\r\nexport default Loading\r\n","import React from 'react';\r\nimport { FormControl, FormErrorMessage, FormHelperText, FormLabel } from '@chakra-ui/form-control'\r\nimport { Input, } from '@chakra-ui/input'\r\nimport { ListItem, UnorderedList } from '@chakra-ui/layout'\r\n\r\nconst InputText = ({ errors, touched, isRequired = false, label, help, ...rests }) => {\r\n    const { value, ...rest } = rests\r\n    return (\r\n        <FormControl isInvalid={errors && touched} isRequired={isRequired}>\r\n            <FormLabel>{label}</FormLabel>\r\n\r\n            <Input\r\n                {...rest}\r\n                value={value || ''}\r\n            />\r\n\r\n            {errors && touched ? (\r\n                <FormErrorMessage>\r\n                    <UnorderedList>\r\n                        {\r\n                            errors instanceof Array ? (errors.map((error, key) => (<ListItem key={key}>{error}</ListItem>))) : (<ListItem>{errors}</ListItem>)\r\n                        }\r\n                    </UnorderedList>\r\n                </FormErrorMessage>\r\n            ) : (\r\n                <FormHelperText>{help}</FormHelperText>\r\n            )}\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default InputText\r\n","import { FormControl, FormErrorMessage, FormHelperText, FormLabel } from '@chakra-ui/form-control'\r\nimport { Input, InputGroup, InputRightElement } from '@chakra-ui/input'\r\nimport { ListItem, UnorderedList } from '@chakra-ui/layout'\r\nimport { Switch } from '@chakra-ui/switch'\r\nimport React, { useState } from 'react'\r\n\r\nconst InputPassword = ({ errors, touched, isRequired = false, label, help, ...rests }) => {\r\n  const [show, setShow] = useState(false)\r\n  const { value, ...rest } = rests\r\n  return (\r\n    <FormControl isInvalid={errors && touched} isRequired={isRequired}>\r\n      <FormLabel>{label}</FormLabel>\r\n      <InputGroup>\r\n\r\n        <Input\r\n          type={show ? \"text\" : \"password\"}\r\n          value={value || ''}\r\n          {...rest}\r\n        />\r\n\r\n        <InputRightElement>\r\n          <Switch\r\n            size=\"sm\"\r\n            checked={show}\r\n            onChange={(e) => setShow(e.target.checked)}\r\n          />\r\n        </InputRightElement>\r\n\r\n      </InputGroup>\r\n\r\n      {errors && touched ? (\r\n        <FormErrorMessage>\r\n          <UnorderedList>\r\n            {\r\n              errors instanceof Array ? (errors.map((error, key) => (<ListItem key={key}>{error}</ListItem>))) : (<ListItem>{errors}</ListItem>)\r\n            }\r\n          </UnorderedList>\r\n        </FormErrorMessage>\r\n      ) : (\r\n        <FormHelperText>{help}</FormHelperText>\r\n      )}\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default InputPassword\r\n","import * as yup from 'yup';\r\n\r\nexport const loginValidator = yup.object().shape({\r\n    username: yup.string().required('El username es obligatorio'),\r\n    password: yup.string().required('El password es obligatorio'),\r\n})\r\n\r\n\r\nexport const singupValidator = yup.object().shape({\r\n    username: yup.string().required('El username es obligatorio'),\r\n    password: yup.string().required('El password es obligatorio').min(6, 'La contraseña debe contener al menos 6 caracteres'),\r\n    password2: yup.string().required('El password es obligatorio').min(6, 'La contraseña debe contener al menos 6 caracteres').oneOf([yup.ref('password'), null], 'Las contraseñas no coinciden'),\r\n    firstName: yup.string().required('El nombre es requerido'),\r\n    lastName: yup.string().required('El Apellido es requerido'),\r\n    email: yup.string().required('El email es requerido').email('No es un email válido'),\r\n    gender: yup.string().required('El Genero es requerido'),\r\n\r\n})","import React, { useContext } from 'react'\r\nimport { Button } from '@chakra-ui/button'\r\nimport { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport { Box, Heading, Stack } from '@chakra-ui/layout'\r\nimport InputText from '../forms/InputText'\r\nimport { useFormik } from 'formik';\r\nimport InputPassword from '../forms/InputPassword'\r\nimport { Link } from 'react-router-dom'\r\nimport { loginValidator } from '../../validators/validator'\r\nimport { FormControl, FormLabel } from '@chakra-ui/form-control'\r\nimport { Switch } from '@chakra-ui/switch'\r\nimport { AuthContext } from '../../contexts/AuthContext'\r\nimport axs from '../../helpers/axios'\r\n\r\n\r\nconst Login = () => {\r\n\r\n    const { setAuth } = useContext(AuthContext)\r\n\r\n\r\n    const login = (username, password) => {\r\n\r\n        axs({\r\n            method: 'POST',\r\n            url: 'auth/login',\r\n            data: { username, password }\r\n        }).then((res) => {\r\n            console.log(res);\r\n            const { user, token } = res.data\r\n            localStorage.setItem('token', token)\r\n            setAuth({ user, token, cheking: false })\r\n\r\n        }).catch((err) => {\r\n            if (err.response?.data) {\r\n                formik.setErrors(err.response.data)\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (data) => {\r\n        const remember = data.remember\r\n        remember ? localStorage.setItem('username', data.username) : localStorage.removeItem('username')\r\n        login(data.username, data.password)\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues:\r\n        {\r\n            remember: true,\r\n            username: localStorage.getItem('username')\r\n        },\r\n        onSubmit: handleSubmit,\r\n        validationSchema: loginValidator\r\n    })\r\n\r\n\r\n    return (\r\n        <Box as={'form'} mt={10} onSubmit={formik.handleSubmit} >\r\n            <Heading mb='2'>Login</Heading>\r\n            <Stack spacing={4}>\r\n                <InputText\r\n                    errors={formik.errors.username}\r\n                    touched={formik.touched.username}\r\n                    isRequired={true}\r\n                    label='Username'\r\n                    help='Ingrese su nombre de usuario'\r\n                    type='text'\r\n                    variant=\"filled\"\r\n                    placeholder=\"Usuario\"\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.600\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('username')}\r\n                />\r\n\r\n                <InputPassword\r\n                    errors={formik.errors.password}\r\n                    touched={formik.touched.password}\r\n                    isRequired={true}\r\n                    label='Password'\r\n                    help='Ingrese la contraseña'\r\n                    variant=\"filled\"\r\n                    placeholder=\"Contraseña\"\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('password')}\r\n                />\r\n\r\n                <FormControl display=\"flex\" alignItems=\"center\">\r\n                    <FormLabel htmlFor=\"email-alerts\" mb=\"0\">\r\n                        ¿Recordarme cuenta?\r\n                    </FormLabel>\r\n                    <Switch {...formik.getFieldProps('remember')} defaultChecked />\r\n                </FormControl>\r\n\r\n            </Stack>\r\n            <Button\r\n                type=\"submit\"\r\n                fontFamily={'heading'}\r\n                mt={8}\r\n                w={'full'}\r\n                bgGradient=\"linear(to-r, red.400,pink.400)\"\r\n                color={'white'}\r\n                _hover={{\r\n                    bgGradient: 'linear(to-r, red.400,pink.400)',\r\n                    boxShadow: 'xl',\r\n                }}\r\n                disabled={formik.isValid ? false : true}\r\n            >\r\n                Iniciar sesión\r\n            </Button>\r\n\r\n            <Link to=\"/auth/signup\" >\r\n                <Button\r\n                    w=\"full\"\r\n                    variant=\"link\"\r\n                    shadow=\"none\"\r\n                    _focus={{ outline: \"none\" }}\r\n                >\r\n                    Crear cuenta\r\n                </Button>\r\n            </Link>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import { FormControl, FormErrorMessage, FormHelperText, FormLabel } from '@chakra-ui/form-control'\r\nimport { ListItem, UnorderedList } from '@chakra-ui/layout'\r\nimport { Select } from '@chakra-ui/select'\r\nimport React from 'react'\r\n\r\nconst InputSelect = ({ errors, touched, isRequired = false, label, help, options = [], ...rest }) => {\r\n    return (\r\n        <FormControl isInvalid={errors && touched} isRequired={isRequired}>\r\n            <FormLabel>{label}</FormLabel>\r\n\r\n            <Select {...rest}>\r\n                {options.map(value => (\r\n                    <option value={value.value} key={value.value}>{value.name}</option>\r\n                ))}\r\n\r\n            </Select>\r\n\r\n            {errors && touched ? (\r\n                <FormErrorMessage>\r\n                    <UnorderedList>\r\n                        {\r\n                            errors instanceof Array ? (errors.map((error, key) => (<ListItem key={key}>{error}</ListItem>))) : (<ListItem>{errors}</ListItem>)\r\n                        }\r\n                    </UnorderedList>\r\n                </FormErrorMessage>\r\n            ) : (\r\n                <FormHelperText>{help}</FormHelperText>\r\n            )}\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default InputSelect\r\n","import { Button } from '@chakra-ui/button'\r\nimport { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport { Heading, Stack } from '@chakra-ui/layout'\r\nimport { useFormik } from 'formik'\r\nimport React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { AuthContext } from '../../contexts/AuthContext'\r\nimport axs from '../../helpers/axios'\r\nimport { singupValidator } from '../../validators/validator'\r\nimport InputPassword from '../forms/InputPassword'\r\nimport InputSelect from '../forms/InputSelect'\r\nimport InputText from '../forms/InputText'\r\n\r\nconst Signup = () => {\r\n\r\n    const { setAuth } = useContext(AuthContext)\r\n    const handleSubmit = (data) => {\r\n        axs({\r\n            method: 'POST',\r\n            url: '/auth/signup',\r\n            data\r\n        }).then(res => {\r\n            console.log(res);\r\n            const { user, token } = res.data\r\n            localStorage.setItem('token', token)\r\n            setAuth({ user, token })\r\n        }).catch(err => {\r\n            formik.setErrors(err.response.data)\r\n        })\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {},\r\n        onSubmit: handleSubmit,\r\n        validationSchema: singupValidator\r\n    })\r\n\r\n    return (\r\n        <Stack spacing={4} as='form' onSubmit={formik.handleSubmit}>\r\n            <Heading mb='2'>Signup</Heading>\r\n            <InputText\r\n                errors={formik.errors.username}\r\n                touched={formik.touched.username}\r\n                isRequired={true}\r\n                label='Username'\r\n                help='Ingrese un nombre de usuario'\r\n                type='text'\r\n                variant=\"filled\"\r\n                placeholder=\"Usuario\"\r\n                _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                autoComplete=\"none\"\r\n                {...formik.getFieldProps('username')}\r\n            />\r\n\r\n            <Stack direction={{ base: 'column', lg: 'row' }}>\r\n                <InputPassword\r\n                    errors={formik.errors.password}\r\n                    touched={formik.touched.password}\r\n                    isRequired={true}\r\n                    label='Password'\r\n                    help='Ingrese la contraseña'\r\n                    variant=\"filled\"\r\n                    placeholder=\"Contraseña\"\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('password')}\r\n                />\r\n\r\n                <InputPassword\r\n                    errors={formik.errors.password2}\r\n                    touched={formik.touched.password2}\r\n                    isRequired={true}\r\n                    label='Confirmar contraseña'\r\n                    help='Confirmar Contraseña'\r\n                    variant=\"filled\"\r\n                    placeholder=\"Contraseña\"\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('password2')}\r\n                />\r\n            </Stack>\r\n            <Stack direction={{ base: 'column', lg: 'row' }}>\r\n                <InputText\r\n                    errors={formik.errors.firstName}\r\n                    touched={formik.touched.firstName}\r\n                    isRequired={true}\r\n                    label='Nombre '\r\n                    help='Ingrese su nombre '\r\n                    type='text'\r\n                    variant=\"filled\"\r\n                    placeholder=\"Nombre \"\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('firstName')}\r\n                />\r\n                <InputText\r\n                    errors={formik.errors.lastName}\r\n                    touched={formik.touched.lastName}\r\n                    isRequired={true}\r\n                    label='Apellidos '\r\n                    help='Ingrese su apellido '\r\n                    type='text'\r\n                    variant=\"filled\"\r\n                    placeholder=\"apellidos \"\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('lastName')}\r\n                />\r\n\r\n\r\n            </Stack>\r\n            <Stack direction={{ base: 'column', lg: 'row' }}>\r\n                <InputText\r\n                    errors={formik.errors.email}\r\n                    touched={formik.touched.email}\r\n                    isRequired={true}\r\n                    label='Email'\r\n                    help='Ingrese su correo'\r\n                    type='email'\r\n                    variant=\"filled\"\r\n                    placeholder=\"Email\"\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n\r\n                <InputSelect\r\n                    errors={formik.errors.gender}\r\n                    touched={formik.touched.gender}\r\n                    isRequired={true}\r\n                    label='Género'\r\n                    help='Ingrese su género'\r\n                    placeholder=\"Seleccione el género...\"\r\n                    variant=\"filled\"\r\n                    bg={useColorModeValue(\"gray.50\", \"gray.700\")}\r\n                    _focus={{ bg: useColorModeValue(\"ini\", \"gray.700\") }}\r\n                    autoComplete=\"none\"\r\n                    {...formik.getFieldProps('gender')}\r\n                    options={[\r\n                        { value: 'Masculino', name: 'Masculino' },\r\n                        { value: 'Femenino', name: 'Femenino' },\r\n                        { value: 'Otro', name: 'Otro' },\r\n                    ]}\r\n                />\r\n            </Stack>\r\n\r\n            <Button\r\n                fontFamily={'heading'}\r\n                type=\"submit\"\r\n                mt={8}\r\n                w={'full'}\r\n                bgGradient=\"linear(to-r, red.400,pink.400)\"\r\n                color={'white'}\r\n                _hover={{\r\n                    bgGradient: 'linear(to-r, red.400,pink.400)',\r\n                    boxShadow: 'xl',\r\n                }}\r\n                disabled={formik.isValid && Object.keys(formik.touched).length !== 0 ? false : true}\r\n            >\r\n                Crear cuenta\r\n            </Button>\r\n\r\n            <Link to=\"/auth/login\" >\r\n                <Button\r\n                    w=\"full\"\r\n                    variant=\"link\"\r\n                    shadow=\"none\"\r\n                    _focus={{ outline: \"none\" }}\r\n                >\r\n                    Login\r\n                </Button>\r\n            </Link>\r\n\r\n        </Stack>\r\n    )\r\n}\r\n\r\nexport default Signup\r\n","import { Image } from '@chakra-ui/image'\r\nimport React from 'react'\r\nimport { Container, Flex, Stack, Box } from \"@chakra-ui/layout\";\r\nimport { useLocation } from 'react-router';\r\nimport Login from '../components/auth/Login';\r\nimport Signup from '../components/auth/Signup';\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\n\r\n\r\n\r\nconst AuthPage = () => {\r\n    const path = useLocation().pathname;\r\n    return (\r\n        <Container\r\n            as={Flex}\r\n            maxW={\"7xl\"}\r\n            minH='100vh'\r\n            align=\"center\"\r\n            justifyContent='center'\r\n            flexDir={{ base: 'column-reverse', md: 'row' }}\r\n\r\n        >\r\n            <Stack flex='3' >\r\n                <Image src=\"https://mdbootstrap.com/img/Photos/new-templates/bootstrap-login-form/draw2.svg\" alt=\"Segun Adebayo\" />\r\n\r\n            </Stack>\r\n            <Stack flex='2' m={5}>\r\n\r\n                <Box bg={useColorModeValue('gray.50', 'gray.800')} p='10' rounded=\"2xl\" boxShadow='lg'>\r\n\r\n                    {path === \"/auth/login\" ? <Login /> : <Signup />}\r\n                </Box>\r\n            </Stack>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default AuthPage\r\n","import React from 'react'\r\nimport { Routes, Route } from 'react-router-dom'\r\nimport AuthPage from '../pages/AuthPage'\r\n\r\nconst AuthRouter = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path=\"/login\" element={<AuthPage />} />\r\n            <Route path=\"/signup\" element={<AuthPage />} />\r\n        </Routes>\r\n    )\r\n}\r\n\r\nexport default AuthRouter\r\n","import { Avatar } from '@chakra-ui/avatar'\r\nimport React from 'react'\r\n\r\nconst UserAvatar = ({ size = 'md', src, online = true, ...rest }) => {\r\n    return (\r\n        <Avatar\r\n            {...rest}\r\n            size={size}\r\n            src={src}\r\n            alt={'avatar'}\r\n            mx={2}\r\n            pos={'relative'}\r\n            border='2px solid white'\r\n            _after={{\r\n                content: '\"\"',\r\n                w: 4,\r\n                h: 4,\r\n                bg: online ? 'green.300' : 'red.300',\r\n                border: '2px solid white',\r\n                rounded: 'full',\r\n                pos: 'absolute',\r\n                bottom: 0,\r\n                right: 3,\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default UserAvatar\r\n","import {\r\n    faCode,\r\n    faCommentDots,\r\n    faHighlighter,\r\n    faMoon,\r\n    faLightbulb,\r\n    faPaperPlane,\r\n    faClock,\r\n    faUser,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nlibrary.add(\r\n    faCode,\r\n    faCommentDots,\r\n    faHighlighter,\r\n    faMoon,\r\n    faLightbulb,\r\n    faPaperPlane,\r\n    faClock, faUser,\r\n);","import moment from 'moment'\r\nimport 'moment/locale/es'\r\nmoment.locale('es')\r\n\r\nexport const dateFormat = (date) => {\r\n    return moment(date).format('LLLL')\r\n    // return moment(date).format('DD/MM/YYYY hh:mm a')\r\n}\r\n\r\nexport const disconnectedIn = (date) => {\r\n    return moment(date).startOf('min').fromNow(true);\r\n}\r\n","import md5 from 'md5';\r\n\r\nconst getAvatar = (email = '') => {\r\n\r\n    email = email.trim();\r\n    email = email.toLowerCase()\r\n    const hash = md5(email)\r\n    const url = `https://www.gravatar.com/avatar/${hash}?d=identicon&f=y&s=128`\r\n    return url\r\n}\r\n\r\nexport default getAvatar","import React from 'react'\r\nimport { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport { Flex, Stack, Text } from '@chakra-ui/layout'\r\nimport UserAvatar from '../forms/UserAvatar'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport '../../variables/iconos'\r\nimport { dateFormat } from '../../helpers/dateFormat'\r\nimport getAvatar from '../../helpers/avatarUrl'\r\nconst Chat = ({ me = false, message }) => {\r\n    const bgChat = useColorModeValue(me ? 'gray.100' : 'cyan.100', me ? 'gray.800' : 'blue.900');\r\n    return (\r\n        <Flex maxW={{ base: '85%', lg: '80%' }} w='fit-content' align='end' ms={me ? 'auto' : '0'} my='2'>\r\n            {!me && <UserAvatar size='sm' src={message.from.picture ?? getAvatar(message.from.email)} />}\r\n\r\n            <Stack\r\n                bg={bgChat}\r\n                boxShadow={'lg'}\r\n                p={8}\r\n                rounded={'xl'}\r\n                pos={'relative'}\r\n                _after={{\r\n                    content: `\"\"`,\r\n                    w: 0,\r\n                    h: 0,\r\n                    border: '10px solid transparent',\r\n                    borderLeftColor: me ? 'transparent' : bgChat,\r\n                    borderTopColor: me ? 'transparent' : bgChat,\r\n\r\n                    borderRightColor: me ? bgChat : 'transparent',\r\n                    borderBlockColor: me ? bgChat : 'transparent',\r\n\r\n                    pos: 'absolute',\r\n                    bottom: '-10px',\r\n                    left: me ? 'initial' : '0',\r\n                    right: me ? '0' : 'initial'\r\n                }}>\r\n                <Text\r\n\r\n                    color={useColorModeValue('gray.600', 'gray.400')}\r\n                    fontSize={'md'}>\r\n                    {message.content}\r\n                </Text>\r\n                <Text fontSize='small' textAlign={me ? 'left' : 'right'}><FontAwesomeIcon icon={['fa', 'clock']} /> {dateFormat(message.createdAt)}</Text>\r\n\r\n            </Stack>\r\n            {me && <UserAvatar size='sm' src={message.from.picture ?? getAvatar(message.from.email)} />}\r\n\r\n        </Flex>\r\n\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","\r\nimport { Box } from '@chakra-ui/layout'\r\nimport React, { useContext } from 'react'\r\nimport Chat from './Chat'\r\nimport { useSelector } from 'react-redux'\r\nimport { AuthContext } from '../../contexts/AuthContext'\r\nconst ChatContainer = () => {\r\n\r\n    const messages = useSelector(state => state.chat.messages)\r\n    const { auth } = useContext(AuthContext)\r\n\r\n    return (\r\n        <Box h='full' p='2' className='scroll' id='chatContainer'>\r\n            {\r\n                messages.map(message => (\r\n                    <Chat me={auth.user._id === message.from._id} message={message} key={message._id} />\r\n\r\n                ))\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ChatContainer\r\n","export const types = {\r\n\r\n    chatListUsers: 'chat/list/users',\r\n    chatActivate: 'chat/activate',\r\n    chatSendMessage: 'chat/send/message',\r\n    chatLoad: 'chat/load',\r\n\r\n    authLogout: '/auth/logout',\r\n\r\n    chatlist: 'chat/list/',\r\n    chatTyping: 'chat/Typing',\r\n    chatNotTyping: 'chat/not/Typing',\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n","import { types } from \"../variables/types\";\r\n\r\n\r\nexport const startListUsers = (users) => ({\r\n    type: types.chatListUsers,\r\n    payload: users\r\n})\r\n\r\n\r\nexport const startChatActivate = (user) => ({\r\n    type: types.chatActivate,\r\n    payload: user\r\n})\r\n\r\nexport const startSendMessage = (message) => ({\r\n    type: types.chatSendMessage,\r\n    payload: message\r\n})\r\n\r\n\r\nexport const startLoadMessage = (messages) => ({\r\n    type: types.chatLoad,\r\n    payload: messages\r\n})\r\n\r\nexport const startLogout = () => ({\r\n    type: types.authLogout\r\n})\r\n\r\nexport const startChatsList = (chats) => ({\r\n    type: types.chatlist, payload: chats\r\n})\r\n\r\nexport const startChatTyping = (id) => ({\r\n    type: types.chatTyping, payload: id\r\n})\r\nexport const startNotChatTyping = (id) => ({\r\n    type: types.chatNotTyping, payload: id\r\n})","import { animateScroll } from 'react-scroll'\r\n\r\n\r\nexport const scrollBottom = (containerId, duration = 0) => {\r\n    animateScroll.scrollToBottom({ containerId, duration })\r\n}\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport io from 'socket.io-client';\r\nimport { startChatsList, startChatTyping, startListUsers, startNotChatTyping, startSendMessage } from '../actions/chat';\r\nimport { scrollBottom } from '../helpers/scroll';\r\n\r\n\r\nexport const useSocket = (serverPath) => {\r\n\r\n    // const socket = useMemo(() => io.connect(serverPath, { transports: ['websocket'] }), [serverPath]);\r\n\r\n    const [socket, setSocket] = useState(null)\r\n    const [online, setOnline] = useState(false);\r\n    const dispatch = useDispatch()\r\n\r\n    const connectSocket = useCallback((token) => {\r\n        const socketTem = io.connect(serverPath,\r\n            {\r\n                transports: ['websocket'],\r\n                forceNew: true,\r\n                query: { token }\r\n            }\r\n        )\r\n        setSocket(socketTem)\r\n    }, [serverPath])\r\n\r\n    const disconnectSocket = useCallback(() => {\r\n        socket?.disconnect();\r\n    }, [socket])\r\n\r\n\r\n    useEffect(() => {\r\n        setOnline(socket?.connected);\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n        socket?.on('connect', () => setOnline(true));\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n        socket?.on('disconnect', () => setOnline(false));\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n        // obtener todo los usuarios\r\n        socket?.on('list-users', (users) => {\r\n            dispatch(startListUsers(users))\r\n        })\r\n    }, [socket, dispatch])\r\n    useEffect(() => {\r\n        // obtener todo los mensajes del usuario\r\n        socket?.on('list-messages', (messages) => {\r\n            dispatch(startChatsList(messages))\r\n        })\r\n    }, [socket, dispatch])\r\n\r\n    useEffect(() => {\r\n        // recibir mensajes privador\r\n        socket?.on('receive-message', (message) => {\r\n            dispatch(startSendMessage(message))\r\n            scrollBottom('chatContainer', 0)\r\n        })\r\n    }, [socket, dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n        socket?.on('typing', (id) => {\r\n            dispatch(startChatTyping(id))\r\n        })\r\n    }, [socket, dispatch])\r\n\r\n    useEffect(() => {\r\n        socket?.on('not-typing', (id) => {\r\n            dispatch(startNotChatTyping(id))\r\n        })\r\n    }, [socket, dispatch])\r\n\r\n    return {\r\n        socket,\r\n        online,\r\n        connectSocket,\r\n        disconnectSocket,\r\n    }\r\n}","import React, { useContext, useEffect } from 'react';\r\nimport { createContext } from 'react';\r\nimport { useSocket } from '../hooks/useSocket';\r\nimport { AuthContext } from './AuthContext';\r\n\r\n\r\nexport const SocketContext = createContext();\r\n\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n\r\n    const { socket, online, connectSocket, disconnectSocket } = useSocket(process.env.REACT_APP_API_URL);\r\n\r\n    const { auth } = useContext(AuthContext)\r\n\r\n    useEffect(() => {\r\n        if (auth.token) {\r\n            connectSocket(auth.token);\r\n        }\r\n    }, [auth.token, connectSocket])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!auth.token) {\r\n            disconnectSocket();\r\n        }\r\n    }, [auth.token, disconnectSocket])\r\n\r\n\r\n    return (\r\n        <SocketContext.Provider value={{ socket, online }}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    )\r\n}","import { Button } from '@chakra-ui/button'\r\nimport { Input } from '@chakra-ui/input'\r\nimport { Flex, Stack } from '@chakra-ui/layout'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport React, { useContext, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { AuthContext } from '../../contexts/AuthContext'\r\nimport { SocketContext } from '../../contexts/SocketContext'\r\nimport '../../variables/iconos'\r\n\r\nconst ControlChat = () => {\r\n\r\n    const [message, setmessage] = useState('')\r\n    const { socket } = useContext(SocketContext)\r\n    const { auth } = useContext(AuthContext)\r\n    const userSelected = useSelector(state => state.chat.userSelected)\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (message.trim().length !== 0) {\r\n            // enviar mensaje\r\n            socket.emit('send-message', {\r\n                from: auth.user._id,\r\n                to: userSelected._id,\r\n                content: message\r\n            })\r\n            setmessage('')\r\n        }\r\n    }\r\n\r\n    const emitTyping = () => {\r\n        console.log('typing');\r\n        socket.emit('typing', { from: auth.user._id, to: userSelected._id })\r\n\r\n    }\r\n    const emitNotTyping = () => {\r\n        console.log('no typing');\r\n        socket.emit('not-typing', { from: auth.user._id, to: userSelected._id })\r\n    }\r\n    return (\r\n        <Flex\r\n            h={16}\r\n            alignItems={'center'}\r\n            justifyContent={'space-between'}\r\n            p={4}\r\n            as='form'\r\n            onSubmit={handleSubmit}\r\n        >\r\n\r\n            <Input type='text' value={message} placeholder='Enviar mensaje' variant='filled'\r\n                onChange={(e) => {\r\n                    setmessage(e.target.value);\r\n                }}\r\n                onFocus={emitTyping}\r\n                onBlur={emitNotTyping}\r\n            />\r\n\r\n            <Stack direction={'row'} spacing={7} mx='3'>\r\n\r\n                <Button type='submit' ><FontAwesomeIcon icon={['fa', 'paper-plane']} /></Button>\r\n            </Stack>\r\n\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default ControlChat\r\n","\r\nimport { Box, Divider, Flex, Grid, Heading, HStack, Stack, Text, } from '@chakra-ui/layout'\r\nimport UserAvatar from '../forms/UserAvatar'\r\nimport { Button } from '@chakra-ui/button';\r\nimport { useSelector } from 'react-redux';\r\nimport getAvatar from '../../helpers/avatarUrl';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport '../../variables/iconos'\r\nimport { dateFormat } from '../../helpers/dateFormat';\r\n\r\nconst NavbarChat = () => {\r\n    const userSelected = useSelector(state => state.chat.userSelected)\r\n    return (\r\n        <Box rounded='lg'>\r\n            <Flex alignItems={'center'} justifyContent={'space-between'} py={3} mx='1'>\r\n                <HStack>\r\n                    <UserAvatar src={userSelected.picture ?? getAvatar(userSelected.email)} online={userSelected.online} />\r\n                    <Grid>\r\n                        <Heading fontSize={{ base: 'md', lg: 'xl' }} fontFamily={'body'} whiteSpace='nowrap' overflow='hidden' textOverflow='ellipsis'>\r\n                            {userSelected.firstName} {userSelected.lastName}\r\n                        </Heading>\r\n                        <Flex direction={{ base: 'column', lg: 'row' }} >\r\n                            <Text me='3' fontWeight={600} color={'gray.500'}>\r\n                                {userSelected.email}\r\n                            </Text>\r\n                            <Text fontSize='small' my='auto'>\r\n                                <FontAwesomeIcon icon={['fa', 'clock']} />  {dateFormat(userSelected.lastLogin)}\r\n                            </Text>\r\n                        </Flex>\r\n                    </Grid>\r\n                </HStack>\r\n\r\n                <Flex alignItems={'center'}>\r\n                    <Stack direction={'row'} spacing={7}>\r\n                        <Button />\r\n                    </Stack>\r\n                </Flex>\r\n            </Flex>\r\n            <Divider />\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default NavbarChat\r\n","import { Flex } from '@chakra-ui/layout'\r\nimport React from 'react'\r\nimport ChatContainer from './ChatContainer'\r\nimport ControlChat from './ControlChat'\r\nimport NavbarChat from './NavbarChat'\r\n\r\nconst MainChat = () => {\r\n    return (\r\n        <Flex direction=\"column\" h='full'>\r\n            <NavbarChat />\r\n            <ChatContainer flex='1' />\r\n            <ControlChat />\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default MainChat\r\n","import { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport { Box, Flex, Heading, HStack, Text, Grid } from '@chakra-ui/layout'\r\nimport { useMediaQuery } from '@chakra-ui/media-query'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { startChatActivate, startLoadMessage } from '../../actions/chat'\r\nimport getAvatar from '../../helpers/avatarUrl'\r\nimport axs from '../../helpers/axios'\r\nimport { disconnectedIn } from '../../helpers/dateFormat'\r\nimport { scrollBottom } from '../../helpers/scroll'\r\n// import getAvatar from '../../helpers/avatarUrl'\r\nimport UserAvatar from '../forms/UserAvatar'\r\n\r\nconst ChatItem = ({ chat, setShowChat }) => {\r\n    const dispatch = useDispatch();\r\n    const userSelected = useSelector(state => state.chat.userSelected)\r\n    const active = useColorModeValue('gray.200', 'gray.700');\r\n\r\n    const [isMd] = useMediaQuery('(min-width: 48em)')\r\n    const handleClick = () => {\r\n        if (!isMd) {\r\n            setShowChat(false);\r\n        }\r\n        if (userSelected?._id !== chat._id) {\r\n            dispatch(startChatActivate(chat));\r\n\r\n            axs({\r\n                url: `message/${chat._id}`,\r\n                headers: { 'Authorization': localStorage.getItem('token') }\r\n            }).then((res) => {\r\n                dispatch(startLoadMessage(res.data))\r\n                scrollBottom('chatContainer', 0)\r\n            }).catch((err) => {\r\n                console.log(err.response);\r\n            })\r\n        }\r\n    }\r\n    return (\r\n\r\n        <Flex\r\n            justify='space-between' py={4} px={2}\r\n            _hover={{ backgroundColor: active }}\r\n            cursor='pointer' rounded='md'\r\n            onClick={handleClick}\r\n            bg={\r\n                chat._id === userSelected?._id ? active : 'initial'\r\n            }\r\n        >\r\n            <HStack >\r\n                <UserAvatar online={chat.online} src={chat.picture ?? getAvatar(chat.email)} />\r\n                <Grid>\r\n                    <Heading size='sm'>{chat.username}</Heading>\r\n                    <Text color={'gray.500'} whiteSpace='nowrap' overflow='hidden' textOverflow='ellipsis' >\r\n                        {chat.sendMe ? null : 'Tú:'}{chat.content}\r\n                    </Text>\r\n                </Grid>\r\n            </HStack>\r\n\r\n            <Box whiteSpace='nowrap'>\r\n                {chat.online ? (\r\n                    <Text color='green' fontSize='sm'>En linea</Text>\r\n                ) : (\r\n                    <Text fontSize='sm'>{disconnectedIn(chat.lastLogin)}</Text>\r\n                )}\r\n                <Text color='green' fontSize='sm'>{chat.typing ? 'Escribiendo...' : ''}</Text>\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default ChatItem\r\n","import { Box, Text } from '@chakra-ui/layout'\r\nimport { useMediaQuery } from '@chakra-ui/media-query'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { startChatActivate, startLoadMessage } from '../../actions/chat'\r\nimport getAvatar from '../../helpers/avatarUrl'\r\nimport axs from '../../helpers/axios'\r\nimport { scrollBottom } from '../../helpers/scroll'\r\nimport UserAvatar from '../forms/UserAvatar'\r\n\r\nconst UsersActive = ({ user, setShowChat }) => {\r\n    const userSelected = useSelector(state => state.chat.userSelected)\r\n    const [isMd] = useMediaQuery('(min-width: 48em)')\r\n    const dispatch = useDispatch();\r\n    const handleClick = () => {\r\n        if (!isMd) {\r\n            setShowChat(false);\r\n        }\r\n        if (userSelected?._id !== user._id) {\r\n            dispatch(startChatActivate(user));\r\n\r\n            axs({\r\n                url: `message/${user._id}`,\r\n                headers: { 'Authorization': localStorage.getItem('token') }\r\n            }).then((res) => {\r\n                dispatch(startLoadMessage(res.data))\r\n                scrollBottom('chatContainer', 0)\r\n            }).catch((err) => {\r\n                console.log(err.response);\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <Box cursor='pointer' onClick={handleClick}>\r\n            <UserAvatar online={user.online} src={user.picture ?? getAvatar(user.email)} />\r\n            <Text color='gray.500' textAlign='center' >{user.username}</Text>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default UsersActive\r\n","import { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport { Input } from '@chakra-ui/input'\r\nimport { Box, Flex, Grid, Heading, HStack, Text } from '@chakra-ui/layout'\r\nimport { useMediaQuery } from '@chakra-ui/media-query'\r\nimport { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { startChatActivate, startLoadMessage } from '../../actions/chat'\r\nimport getAvatar from '../../helpers/avatarUrl'\r\nimport axs from '../../helpers/axios'\r\nimport { disconnectedIn } from '../../helpers/dateFormat'\r\nimport { scrollBottom } from '../../helpers/scroll'\r\nimport UserAvatar from '../forms/UserAvatar'\r\n\r\nconst Search = ({ setShowChat }) => {\r\n\r\n    const [users, setUsers] = useState([])\r\n\r\n    const handleChange = async (e) => {\r\n        const keyword = e.target.value.trim();\r\n\r\n        if (keyword) {\r\n            try {\r\n\r\n                const res = await axs({\r\n                    method: 'POST',\r\n                    url: `auth/list?keyword=${keyword}`,\r\n                    headers: { 'Authorization': localStorage.getItem('token') }\r\n                })\r\n\r\n                setUsers(res.data)\r\n\r\n            } catch (error) {\r\n                console.log(error.response);\r\n            }\r\n        } else {\r\n            setUsers([])\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Box position=\"relative\">\r\n            <Input type='search' placeholder='Buscar...' variant='filled' onChange={handleChange} />\r\n            <Box\r\n                position=\"absolute\"\r\n                zIndex='100'\r\n                bg={useColorModeValue('gray.100', 'blue.900')}\r\n                w='full'\r\n                rounded='lg'\r\n                boxShadow='2xl'\r\n            >\r\n                {\r\n                    users.map((user) => (\r\n                        <SearchItem key={user._id} user={user} setShowChat={setShowChat} setUsers={setUsers} />\r\n                    ))\r\n                }\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\nconst SearchItem = ({ user, setShowChat, setUsers }) => {\r\n    const bgActive = useColorModeValue('gray.200', 'gray.700');\r\n    const [isMd] = useMediaQuery('(min-width: 48em)')\r\n    const dispatch = useDispatch();\r\n    const userSelected = useSelector(state => state.chat.userSelected)\r\n    const handleClick = () => {\r\n        if (!isMd) {\r\n            setShowChat(false);\r\n        }\r\n        if (userSelected?._id !== user._id) {\r\n            dispatch(startChatActivate(user));\r\n\r\n            axs({\r\n                url: `message/${user._id}`,\r\n                headers: { 'Authorization': localStorage.getItem('token') }\r\n            }).then((res) => {\r\n                dispatch(startLoadMessage(res.data))\r\n                scrollBottom('chatContainer', 0)\r\n                setUsers([])\r\n            }).catch((err) => {\r\n                console.log(err.response);\r\n            })\r\n        }\r\n    }\r\n    return (\r\n\r\n        <Flex\r\n            justify='space-between' py={4} px={2}\r\n            _hover={{ backgroundColor: bgActive }}\r\n            cursor='pointer' rounded='md'\r\n            onClick={handleClick}\r\n\r\n        >\r\n            <HStack >\r\n                <UserAvatar online={user.online} src={user.avatar ?? getAvatar(user.email)} />\r\n                <Grid>\r\n                    <Heading size='sm'>{user.firstName + ' ' + user.lastName}</Heading>\r\n                    <Text color={'gray.500'} whiteSpace='nowrap' overflow='hidden' textOverflow='ellipsis' >\r\n                        {user.email}\r\n                    </Text>\r\n                </Grid>\r\n            </HStack>\r\n\r\n            <Box whiteSpace='nowrap'>\r\n                {user.online ? (\r\n                    <Text color='green'>En linea</Text>\r\n                ) : (\r\n                    <Text>{disconnectedIn(user.lastLogin)}</Text>\r\n                )}\r\n\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport { Box, Divider, Flex, Grid, Heading } from '@chakra-ui/layout'\r\nimport React, { useContext } from 'react'\r\nimport ChatItem from './ChatItem'\r\nimport UsersActive from './UsersActive'\r\nimport { useSelector } from \"react-redux\";\r\nimport { useBreakpointValue } from '@chakra-ui/react'\r\nimport { AuthContext } from '../../contexts/AuthContext'\r\nimport Search from './Search'\r\n\r\nconst SidebarChat = ({ setShowChat }) => {\r\n    const { auth } = useContext(AuthContext)\r\n    const users = useSelector(state => state.chat.users)\r\n    const chats = useSelector(state => state.chat.chats)\r\n    const bgSidebar = useColorModeValue('gray.50', 'gray.800')\r\n    const maxW = useBreakpointValue({ base: 'initial', lg: '420px' })\r\n    return (\r\n        <Flex\r\n            direction='column'\r\n            h='full'\r\n            position={{ base: 'absolute', md: 'initial' }}\r\n            zIndex='600'\r\n            maxW={maxW}\r\n            p={3}\r\n            bg={bgSidebar}\r\n        >\r\n            <Box >\r\n                <Heading my={2} size='lg'>Chats</Heading>\r\n                <Search setShowChat={setShowChat} />\r\n                <Divider my='1' />\r\n            </Box>\r\n\r\n            <Grid templateColumns='repeat(5,1fr)'>\r\n\r\n                {\r\n                    users.filter(user => auth.user._id !== user._id).map(user => (\r\n                        <UsersActive user={user} key={user._id} setShowChat={setShowChat} />\r\n                    ))\r\n                }\r\n\r\n\r\n            </Grid>\r\n\r\n            <Heading size='md' mb={4}>Recientes</Heading>\r\n            <Box flex='1' className='scroll' >\r\n                {\r\n                    chats.map(chat => (\r\n\r\n                        <ChatItem chat={chat} key={chat._id} setShowChat={setShowChat} />\r\n                    ))\r\n                }\r\n\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default SidebarChat\r\n","import { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport { Box, Flex, Heading, Text } from '@chakra-ui/layout'\r\nimport { useMediaQuery } from '@chakra-ui/media-query'\r\nimport React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport MainChat from '../components/chat/MainChat'\r\nimport SidebarChat from '../components/chat/SidebarChat'\r\nconst ChatPage = ({ showChat, setShowChat }) => {\r\n    const userSelected = useSelector(state => state.chat.userSelected)\r\n\r\n    const [isMd] = useMediaQuery('(min-width: 48em)')\r\n\r\n\r\n    const bgChat = useColorModeValue('white', 'gray.900')\r\n\r\n    useEffect(() => {\r\n        setShowChat(isMd)\r\n    }, [isMd, setShowChat])\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            <Box position='relative' h='full'  >\r\n                {showChat && (<SidebarChat setShowChat={setShowChat} />)}\r\n            </Box>\r\n            <Box bg={bgChat} flex={1} >\r\n                {userSelected ? <MainChat /> : <ChatNoSelected />}\r\n\r\n            </Box>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nconst ChatNoSelected = () => {\r\n    return (\r\n        <Flex align=\"center\" justify=\"center\" h='full' direction='column'>\r\n            <Heading\r\n                textAlign='center'\r\n                fontWeight='extrabold'\r\n                fontSize={{ base: '2xl', sm: '3xl', md: '4xl', lg: '6xl' }}\r\n                lineHeight={'110%'}\r\n                color={'green.400'}\r\n                bgClip='text'\r\n                bgGradient='linear(to-l, #5028ca, #00ff95bf)'\r\n            >\r\n                No a seleccionado ningún chat <br />\r\n            </Heading>\r\n            <Text as={'span'} color='gray.600' fontSize='xl' textAlign='center'>\r\n                usa la lupa para buscar personas\r\n            </Text>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default ChatPage\r\n","import React, { useContext } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport '../../variables/iconos'\r\nimport { Flex, VStack, Box, Text, Stack, Heading } from '@chakra-ui/layout'\r\nimport { Button } from '@chakra-ui/button'\r\nimport { useColorMode } from '@chakra-ui/color-mode'\r\nimport { Menu, MenuButton, MenuDivider, MenuItem, MenuList } from '@chakra-ui/menu'\r\nimport { AuthContext } from '../../contexts/AuthContext';\r\nimport UserAvatar from '../forms/UserAvatar'\r\nimport getAvatar from '../../helpers/avatarUrl'\r\nimport { useDispatch } from 'react-redux'\r\nimport { startLogout } from '../../actions/chat'\r\nimport { Link } from 'react-router-dom'\r\nimport { Tooltip } from '@chakra-ui/tooltip'\r\n\r\n\r\n\r\n\r\nconst SidebarMenu = ({ setShowChat }) => {\r\n    const { auth, setAuth } = useContext(AuthContext)\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n    const dispatch = useDispatch()\r\n    const handleLogout = () => {\r\n        dispatch(startLogout())\r\n        localStorage.removeItem('token')\r\n        setAuth({ user: null, token: null, cheking: false });\r\n    }\r\n\r\n    return (\r\n        <Flex direction=\"column\" align=\"center\" justify='space-around' h='full'>\r\n            <VStack>\r\n                <Tooltip label=\"Mensajes\" placement='auto-start'>\r\n                    <Link onClick={() => { setShowChat(show => !show) }} to='/'>\r\n                        <Button >\r\n                            <FontAwesomeIcon icon={['fa', 'comment-dots']} />\r\n                        </Button>\r\n                    </Link>\r\n                </Tooltip>\r\n                <Tooltip label=\"Perfil\" placement='auto-start'>\r\n                    <Link to='profile/' >\r\n                        <Button>\r\n                            <FontAwesomeIcon icon={['fa', 'user']} />\r\n                        </Button>\r\n                    </Link>\r\n                </Tooltip>\r\n            </VStack>\r\n            <VStack>\r\n                <Button>\r\n                    <FontAwesomeIcon icon={['fa', 'code']} />\r\n                </Button>\r\n                <Button>\r\n                    <FontAwesomeIcon icon={['fa', 'code']} />\r\n                </Button>\r\n            </VStack>\r\n            <VStack>\r\n\r\n                <Button onClick={toggleColorMode}>\r\n                    {colorMode === \"light\" ? <FontAwesomeIcon icon={['fa', 'moon']} /> : <FontAwesomeIcon icon={['fa', 'lightbulb']} />}\r\n                </Button>\r\n\r\n\r\n                <Menu>\r\n                    <MenuButton>\r\n                        <UserAvatar size='sm' src={auth.user.picture ?? getAvatar(auth.user.email)} />\r\n                    </MenuButton>\r\n                    <MenuList zIndex='1000' border='0' >\r\n                        <Box p='3'>\r\n                            <Box textAlign='center'>\r\n                                <UserAvatar size='2xl' src={auth.user.picture ?? getAvatar(auth.user.email)} />\r\n                            </Box>\r\n                            <Stack spacing={0} align={'center'} mb={5}>\r\n                                <Heading fontSize={'2xl'} fontWeight={500} fontFamily={'body'}>\r\n                                    {auth.user.username}\r\n                                </Heading>\r\n                                <Text color={'gray.500'}>{auth.user.email}</Text>\r\n                            </Stack>\r\n                        </Box>\r\n                        <Link to='profile/' >\r\n                            <MenuItem command=\"⌘T\">🤵 perfil </MenuItem>\r\n                        </Link>\r\n                        <MenuItem command=\"⌘T\">\r\n                            ⚙️ Configuracion\r\n                        </MenuItem>\r\n                        <MenuDivider />\r\n                        <MenuItem command=\"⌘T\" onClick={handleLogout}>\r\n                            🔴 Salir\r\n                        </MenuItem>\r\n\r\n                    </MenuList>\r\n                </Menu>\r\n            </VStack>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default SidebarMenu\r\n","import { Avatar } from '@chakra-ui/avatar';\r\nimport { Button } from '@chakra-ui/button';\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\nimport { Box, Flex, Grid, GridItem, List, ListItem, Text } from '@chakra-ui/layout';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useContext, useState } from 'react'\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport getAvatar from '../helpers/avatarUrl';\r\nimport '../variables/iconos'\r\nimport { dateFormat } from '../helpers/dateFormat';\r\nconst ProfilePage = () => {\r\n\r\n    const [btnOption, setBtnOption] = useState(1);\r\n    const bgProfile = useColorModeValue(\r\n        \"hsla(0,0%,100%,.8)\",\r\n        \"linear-gradient(112.83deg, rgba(255, 255, 255, 0.21) 0%, rgba(255, 255, 255, 0) 110.84%)\"\r\n    );\r\n    const { auth: { user } } = useContext(AuthContext)\r\n\r\n\r\n    return (\r\n        <Flex direction=\"column\" flex='1' p='3'>\r\n            <Box mb='5'>\r\n                <Box\r\n                    bgImage='https://fondosmil.com/fondo/31355.jpg'\r\n                    w=\"100%\"\r\n                    h={{ base: '200px', lg: '300px' }}\r\n                    borderRadius=\"2xl\"\r\n                    bgPosition=\"50%\"\r\n                    bgRepeat=\"no-repeat\"\r\n                    backgroundSize=\"cover\"\r\n                >\r\n\r\n                </Box>\r\n                <Flex\r\n                    direction={{ base: \"column\", md: \"row\" }}\r\n                    w='90%'\r\n                    justifyContent={{ sm: \"center\", md: \"space-between\" }}\r\n                    align=\"center\"\r\n                    backdropFilter=\"saturate(200%) blur(60px)\"\r\n                    boxShadow=\"0px 2px 5.5px rgba(0, 0, 0, 0.02)\"\r\n                    border=\"2px solid\"\r\n                    borderColor=\"blue.900\"\r\n                    bg={bgProfile}\r\n                    p=\"15px\"\r\n                    rounded=\"2xl\"\r\n                    mt='-60px'\r\n                    mx='auto'\r\n\r\n                >\r\n                    <Flex\r\n                        align=\"center\"\r\n                        mb={{ sm: \"10px\", md: \"0px\" }}\r\n                        direction={{ base: \"column\", md: \"row\" }}\r\n                        w={{ sm: \"100%\" }}\r\n                        textAlign={{ sm: \"center\", md: \"start\" }}\r\n                    >\r\n                        <Avatar\r\n                            me={{ md: \"22px\" }}\r\n                            src={user.picture ?? getAvatar(user.email)}\r\n                            w=\"80px\"\r\n                            h=\"80px\"\r\n                            borderRadius=\"15px\"\r\n                        />\r\n                        <Flex direction=\"column\" maxWidth=\"100%\" my={{ sm: \"14px\" }}>\r\n                            <Text\r\n                                fontSize={{ sm: \"lg\", lg: \"xl\" }}\r\n                                color={\"gray.200\"}\r\n                                fontWeight=\"bold\"\r\n                                ms={{ sm: \"8px\", md: \"0px\" }}\r\n                            >\r\n                                {user.firstName + ' ' + user.lastName}\r\n                            </Text>\r\n                            <Text\r\n                                fontSize={{ sm: \"sm\", md: \"md\" }}\r\n                                color={\"gray.400\"}\r\n                                fontWeight=\"semibold\"\r\n                            >\r\n                                {user.email}\r\n                            </Text>\r\n                        </Flex>\r\n                    </Flex>\r\n                    <Flex\r\n                        direction={{ base: \"column\", lg: \"row\" }}\r\n                        w={{ sm: \"100%\", md: \"50%\", lg: \"auto\" }}\r\n                    >\r\n                        <Button\r\n                            bg={btnOption === 1 ? \"hsla(0,0%,100%,.3)\" : \"transparent\"}\r\n                            borderRadius=\"15px\"\r\n                            _focus={{ shadow: \"none\" }}\r\n                            onClick={() => {\r\n                                setBtnOption(1);\r\n                            }}\r\n                            _hover={{}}\r\n                        >\r\n                            <FontAwesomeIcon icon={['fa', 'code']} />\r\n                            <Text fontSize=\"xs\" fontWeight=\"bold\">\r\n                                Actualizar Datos\r\n                            </Text>\r\n                        </Button>\r\n                        <Button\r\n                            bg={btnOption === 2 ? \"hsla(0,0%,100%,.3)\" : \"transparent\"}\r\n                            borderRadius=\"15px\"\r\n                            _focus={{ shadow: \"none\" }}\r\n                            onClick={() => {\r\n                                setBtnOption(2);\r\n                            }}\r\n                            _hover={{}}\r\n                        >\r\n                            <FontAwesomeIcon icon={['fa', 'code']} />\r\n                            <Text fontSize=\"xs\" fontWeight=\"bold\">\r\n                                Actualizar Contraseña\r\n                            </Text>\r\n                        </Button>\r\n                        <Button\r\n                            bg={btnOption === 3 ? \"hsla(0,0%,100%,.3)\" : \"transparent\"}\r\n                            borderRadius=\"15px\"\r\n                            _focus={{ shadow: \"none\" }}\r\n                            onClick={() => {\r\n                                setBtnOption(3);\r\n                            }}\r\n                            _hover={{}}\r\n                        >\r\n                            <FontAwesomeIcon icon={['fa', 'code']} />\r\n                            <Text fontSize=\"xs\" fontWeight=\"bold\">\r\n                                Otros\r\n                            </Text>\r\n                        </Button>\r\n                    </Flex>\r\n                </Flex>\r\n\r\n            </Box>\r\n            <Grid templateColumns=\"repeat(12,1fr)\" gap='2'>\r\n                <GridItem colSpan={[12, 12, 6, 4]}>\r\n                    <Box boxShadow='xl' p={{ base: '2', lg: '6' }} rounded='2xl' bg={useColorModeValue('white', 'gray.800')}>\r\n                        <Box p=\"12px 5px\" mb=\"12px\">\r\n                            <Text fontSize=\"lg\" fontWeight=\"bold\">\r\n                                Mis datos\r\n                            </Text>\r\n                        </Box>\r\n                        <Box px=\"5px\">\r\n\r\n                            <List spacing={3}>\r\n                                <ListItem>\r\n                                    <Text color=\"gray.500\" fontWeight=\"bold\" d='inline' >Username:</Text> &nbsp; <Text color=\"gray.500\" d='inline'>{user.username}</Text>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Text color=\"gray.500\" fontWeight=\"bold\" d='inline' >Nombres</Text> &nbsp; <Text color=\"gray.500\" d='inline'>{user.firstName}</Text>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Text color=\"gray.500\" fontWeight=\"bold\" d='inline' >Apellidos</Text> &nbsp; <Text color=\"gray.500\" d='inline'>{user.lastName}</Text>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Text color=\"gray.500\" fontWeight=\"bold\" d='inline' >Email</Text> &nbsp; <Text color=\"gray.500\" d='inline'>{user.email}</Text>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <Text color=\"gray.500\" fontWeight=\"bold\" d='inline' >Género</Text> &nbsp; <Text color=\"gray.500\" d='inline'>{user.gender}</Text>\r\n                                </ListItem>\r\n                                <ListItem>\r\n\r\n                                    <Text color=\"gray.500\" fontWeight=\"bold\" d='inline' >Última sesión:</Text> &nbsp; <Text color=\"gray.500\" d='inline'> {dateFormat(user.lastLogin)}</Text>\r\n                                </ListItem>\r\n\r\n                            </List>\r\n\r\n                        </Box>\r\n                    </Box>\r\n                </GridItem>\r\n\r\n                <GridItem colSpan={[12, 12, 6, 8]} >\r\n                    <Box boxShadow='xl'>\r\n\r\n                        menus\r\n                    </Box>\r\n                </GridItem>\r\n            </Grid>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default ProfilePage\r\n","import React, { useState } from 'react'\r\nimport ChatPage from '../pages/ChatPage'\r\nimport { Routes, Route } from 'react-router-dom'\r\nimport { Box, Flex } from '@chakra-ui/layout'\r\nimport { useColorModeValue } from '@chakra-ui/color-mode'\r\nimport SidebarMenu from '../components/chat/SidebarMenu'\r\nimport ProfilePage from '../pages/ProfilePage'\r\nconst ChatRouter = () => {\r\n    const bgMenu = useColorModeValue('gray.100', 'gray.700')\r\n    const [showChat, setShowChat] = useState(true)\r\n    return (\r\n\r\n        <Flex h='100vh' gap='2'>\r\n            <Box bg={bgMenu} p={1} >\r\n                <SidebarMenu setShowChat={setShowChat} />\r\n            </Box>\r\n            <Routes>\r\n                {/* rutas dentro de chatpage */}\r\n                <Route index element={<ChatPage showChat={showChat} setShowChat={setShowChat} />} />\r\n                <Route path=\"/profile\" element={<ProfilePage />} />\r\n            </Routes>\r\n        </Flex>\r\n\r\n    )\r\n}\r\n\r\nexport default ChatRouter\r\n","\r\nimport React, { useContext, useEffect } from 'react'\r\nimport {\r\n    Routes,\r\n    Route,\r\n    Navigate,\r\n    // BrowserRouter,\r\n    HashRouter\r\n} from \"react-router-dom\";\r\n\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport Loading from '../utils/Loading';\r\nimport AuthRouter from './AuthRouter';\r\nimport ChatRouter from './ChatRouter';\r\n\r\n\r\n\r\nconst AppRouter = () => {\r\n    const { auth, checkToken } = useContext(AuthContext)\r\n\r\n\r\n    useEffect(() => {\r\n        checkToken();\r\n    }, [checkToken])\r\n\r\n    if (auth.cheking) {\r\n        return <Loading />\r\n    }\r\n    return (\r\n\r\n        <HashRouter hashType=\"noslash\">\r\n            <Routes>\r\n                <Route\r\n                    path=\"/*\"\r\n                    element={\r\n                        <PrivateRouter token={auth.token}>\r\n                            <ChatRouter />\r\n                        </PrivateRouter>\r\n                    }\r\n                />\r\n                <Route\r\n                    path=\"auth/*\"\r\n                    element={\r\n                        <PublicRouter token={auth.token}>\r\n                            <AuthRouter />\r\n                        </PublicRouter>\r\n                    }\r\n                />\r\n            </Routes>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\n\r\nconst PrivateRouter = ({ children, token }) => {\r\n    return token ? children : <Navigate to=\"/auth/login\" />;\r\n};\r\nconst PublicRouter = ({ children, token }) => {\r\n    return !token ? children : <Navigate to=\"/\" />;\r\n};\r\nexport default AppRouter\r\n","import { types } from \"../variables/types\";\r\n\r\n\r\nconst initialState = {\r\n    userSelected: null,//id del user seleccinado\r\n    users: [], //todo los usuarios \r\n    chats: [],//todo los chats del user\r\n    messages: [],// chat seleccionado\r\n\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case types.chatListUsers:\r\n            return { ...state, users: action.payload }\r\n\r\n        case types.chatActivate:\r\n            if (state.userSelected?._id === action.payload._id) {\r\n                return state\r\n            }\r\n            return { ...state, userSelected: action.payload, messages: [] }\r\n\r\n        case types.chatSendMessage:\r\n            if (\r\n                state.userSelected?._id === action.payload.from._id ||\r\n                state.userSelected?._id === action.payload.to._id\r\n            ) {\r\n                return {\r\n                    ...state, messages: [...state.messages, action.payload]\r\n                }\r\n            }\r\n            return state\r\n        case types.chatLoad:\r\n            return { ...state, messages: action.payload }\r\n\r\n        case types.authLogout:\r\n            return initialState\r\n\r\n        case types.chatlist:\r\n            return { ...state, chats: action.payload }\r\n\r\n        case types.chatTyping:\r\n            return { ...state, chats: state.chats.map(ch => ch._id === action.payload ? { ...ch, typing: true } : ch) }\r\n        case types.chatNotTyping:\r\n            return { ...state, chats: state.chats.map(ch => ch._id === action.payload ? { ...ch, typing: false } : ch) }\r\n        default: return state;\r\n    }\r\n\r\n}","import { combineReducers } from 'redux'\r\nimport { chatReducer } from './chatReducer'\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    chat: chatReducer\r\n})","import { applyMiddleware, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from \"../reducers/rootReducer\";\r\n\r\n\r\n\r\nconst composeEnhancers =\r\n    (typeof window !== \"undefined\" &&\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\r\n    compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);\r\n","\nimport './App.css';\nimport AppRouter from './routers/AppRouter';\nimport { mode } from \"@chakra-ui/theme-tools\";\nimport React from 'react';\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\"\nimport AuthProvider from './contexts/AuthContext';\nimport { SocketProvider } from './contexts/SocketContext';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nconst styles = {\n  global: (props) => ({\n    body: {\n      fontFamily: \"body\",\n      color: mode(\"gray.900\", \"gray.300\")(props),\n      bg: mode(\"white.50\", \"gray.900\")(props),\n      lineHeight: \"base\",\n    },\n    \"*::placeholder\": {\n      color: mode(\"gray.400\", \"whiteAlpha.500\")(props),\n    },\n    \"*, *::before, &::after\": {\n      borderColor: mode(\"gray.200\", \"whiteAlpha.300\")(props),\n      wordWrap: \"break-word\",\n    },\n  }),\n};\n\nconst theme = extendTheme({\n  styles,\n});\n\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <AuthProvider>\n        <Provider store={store}>\n          <SocketProvider>\n            <AppRouter />\n          </SocketProvider>\n        </Provider>\n      </AuthProvider>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}